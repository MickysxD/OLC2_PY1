{"version":3,"sources":["./src/app/pagina/Ejecucion/AST/NodoAST.ts","fs (ignored)","path (ignored)","./src/app/pagina/Ejecucion/Expresion/Identificador.ts","./src/environments/environment.ts","./src/app/pagina/Ejecucion/Instruccion/ConsoleLog.ts","./src/app/pagina/Ejecucion/AST/Tipo.ts","./src/app/pagina/Ejecucion/gramatica.js","./src/app/pagina/Ejecucion/Instruccion/If.ts","./src/app/pagina/Ejecucion/Expresion/Primitivo.ts","./src/app/pagina/Ejecucion/Expresion/Relacional.ts","./src/app/pagina/Ejecucion/Instruccion/Declaracion.ts","./src/app/pagina/Ejecucion/AST/Error.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/pagina/Ejecucion/Expresion/Aritmetica.ts","./src/app/pagina/Ejecucion/Instruccion/Asignacion.ts","./src/app/app.module.ts","./src/app/pagina/pagina.component.ts","./src/app/pagina/pagina.component.html","./src/app/pagina/Ejecucion/AST/Tabla.ts","./src/app/pagina/Ejecucion/Expresion/Logica.ts","./src/app/pagina/Ejecucion/AST/AST.ts","./src/app/app-routing.module.ts","./src/app/pagina/Ejecucion/AST/Simbolo.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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AChC,OAAO,QAAQ,CAAC;SACnB;aAAK,IAAG,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAC;YAC9B,OAAO,MAAM,CAAC;SACjB;aAAK,IAAG,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAC;YAC9B,OAAO,MAAM,CAAC;SACjB;aAAK,IAAG,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,KAAK,EAAC;YAC/B,OAAO,OAAO,CAAC;SAClB;IACL,CAAC;CACJ;;;;;;;;;;;;AC3CD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,sDAAsD,MAAM,gWAAgW,8QAA8Q;AACrrB,aAAa,sBAAsB,MAAM,uHAAuH,yOAAyO;AACzY;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,SAAS,uFAAuF,EAAE,MAAM,EAAE,iFAAiF,EAAE,QAAQ,oEAAoE,UAAU,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,aAAa,gBAAgB,UAAU,EAAE,QAAQ,eAAe,qEAAqE,EAAE,gBAAgB,6BAA6B,oBAAoB,GAAG,gBAAgB,gBAAgB,aAAa,EAAE,aAAa,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,4GAA4G,EAAE,qEAAqE,EAAE,qEAAqE,sFAAsF,qEAAqE,gBAAgB,aAAa,EAAE,oCAAoC,EAAE,qEAAqE,2CAA2C,sBAAsB,GAAG,qFAAqF,EAAE,4GAA4G,eAAe,kGAAkG,GAAG,SAAS,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,EAAE,qEAAqE,8BAA8B,4GAA4G,6BAA6B,UAAU,0DAA0D,kGAAkG,gBAAgB,gBAAgB,GAAG,oBAAoB,gBAAgB,iFAAiF,gBAAgB,UAAU,6BAA6B,4BAA4B,gBAAgB,4BAA4B,gBAAgB,cAAc,gBAAgB,cAAc,4CAA4C,0CAA0C,gBAAgB,0CAA0C,gBAAgB,0CAA0C,gBAAgB,0CAA0C,gBAAgB,sEAAsE,gBAAgB,sEAAsE,yBAAyB,2FAA2F,4BAA4B,oFAAoF,iBAAiB,sEAAsE,EAAE,qBAAqB,8BAA8B,cAAc,6BAA6B,kGAAkG,iBAAiB,cAAc;AAC5tI,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,SAAS,IAAI,GAAG,mBAAO,CAAC,uBAAW;AACnC,SAAS,MAAM,GAAG,mBAAO,CAAC,yBAAa;AACvC,SAAS,QAAQ,GAAG,mBAAO,CAAC,2BAAe;AAC3C,SAAS,QAAQ,GAAG,mBAAO,CAAC,2BAAe;AAC3C,SAAS,MAAM,GAAG,mBAAO,CAAC,yBAAa;AACvC,SAAS,WAAW,GAAG,mBAAO,CAAC,wBAAY;;;AAG3C;AACA,SAAS,WAAW,GAAG,mBAAO,CAAC,oCAAwB;AACvD,SAAS,UAAU,GAAG,mBAAO,CAAC,mCAAuB;AACrD,SAAS,cAAc,GAAG,mBAAO,CAAC,uCAA2B;AAC7D,SAAS,WAAW,GAAG,mBAAO,CAAC,oCAAwB;AACvD,SAAS,OAAO,GAAG,mBAAO,CAAC,gCAAoB;;;AAG/C;AACA,SAAS,WAAW,GAAG,mBAAO,CAAC,sCAA0B;AACzD,SAAS,YAAY,GAAG,mBAAO,CAAC,uCAA2B;AAC3D,SAAS,WAAW,GAAG,mBAAO,CAAC,sCAA0B;AACzD,SAAS,GAAG,GAAG,mBAAO,CAAC,8BAAkB;;;AAGzC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0VAA0V,UAAU,SAAS;AAC7W,aAAa,WAAW;AACxB,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;AC7+BA;AAAA;AAAA;AAAA;AAAA;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","file":"main.js","sourcesContent":["import { Tipo } from \"./Tipo\";\r\nimport { AST } from \"./AST\";\r\nimport { Tabla } from './Tabla';\r\n\r\nexport abstract class NodoAST{\r\n    tipo:Tipo;\r\n    fila:number;\r\n    columna:number;\r\n\r\n    /**\r\n     * @abstract Metodo que sirver para ejecutar una instruccion o expresion\r\n     * si fuera instruccion devuelve nulo y si fuera expresion devuelve un valor\r\n     */\r\n\r\n    abstract ejecutar(tabla:Tabla, ast:AST);\r\n \r\n    /**\r\n     * \r\n     * @constructor Base para cualquier instruccion o expresion, omitir tipo si fuera una instruccion\r\n     * @param type Tipo de la expresion, si fuera una expresion poner valor de nulo\r\n     * @param line Linea de la instruccion o expresion\r\n     * @param column Columna de la instruccion o expresion\r\n     */\r\n\r\n    constructor(tipo:Tipo, fila:number, columna:number) {\r\n        this.tipo = tipo;\r\n        this.fila = fila;\r\n        this.columna = columna;\r\n    }\r\n\r\n}\r\n","/* (ignored) */","/* (ignored) */","import {NodoAST} from \"../AST/NodoAST\";\r\nimport {Tabla} from \"../AST/Tabla\";\r\nimport {AST} from \"../AST/AST\";\r\nimport {Simbolo} from \"../AST/Simbolo\";\r\nimport {Error} from \"../AST/Error\";\r\nimport {Tipo,Tipos} from \"../AST/Tipo\";\r\n\r\n/**\r\n * @class Nodo expresion identificador que obtendra el valor de una variable\r\n */\r\nexport class Identificador extends NodoAST {\r\n    identificador:string;\r\n    valor:NodoAST\r\n\r\n    /**\r\n     * @constructor Retorna el objeto identificador creado\r\n     * @param identifier nombre de la variable\r\n     * @param line Linea del identificador\r\n     * @param column Columna del identificador\r\n     */\r\n\r\n    constructor(identificador:string, tipo:Tipo, valor:NodoAST, fila:number, columna:number){\r\n        //tipo null porque aun no se el tipo\r\n        super(tipo, fila, columna);\r\n        this.identificador = identificador;\r\n        this.valor = valor;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        let variable:Simbolo;\r\n        variable = tabla.getVariable(this.identificador);\r\n        if (variable == null) {\r\n            const error = new Error(\"Semantico\",\"No se ha encontrado la variable \" + this.identificador, this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }else if (variable.valor == null) {\r\n            const error = new Error(\"Semantico\",\"Variable no inicializada \" + this.identificador, this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n        this.tipo = variable.tipo;\r\n        return variable.valor;\r\n   }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NodoAST } from \"../AST/NodoAST\";\r\nimport  {Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * Permite imprimir expresiones en la consola\r\n */\r\n\r\nexport class ConsoleLog extends NodoAST{\r\n    expresion:NodoAST;\r\n\r\n    /**\r\n     * @constructor Retorna el objeto Print\r\n     * @param expression Expresion que se va a mostrar en consola\r\n     * @param line Fila de donde se creo la sentencia\r\n     * @param column Columna donde se creo la sentencia\r\n     */\r\n\r\n    constructor(expresion:NodoAST, fila:number, columna:number){\r\n        super(new Tipo(Tipos.VOID), fila, columna);\r\n        this.expresion = expresion;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const value = this.expresion.ejecutar(tabla, ast);\r\n        if(!(value instanceof Error)){    \r\n            ast.consola.push(value);\r\n        }\r\n        return null;\r\n    }\r\n}","export enum Tipos{\r\n    NUMBER,\r\n    STRING,\r\n    BOOLEAN,\r\n    VOID,\r\n    TYPE,\r\n    ARRAY\r\n}\r\n\r\n/**\r\n * \r\n * @class Permite llevar el control de los tipos del lenguaje\r\n */\r\n\r\nexport class Tipo{\r\n    tipo : Tipos;\r\n\r\n    /**\r\n     * \r\n     * @constructor Crea un nuevo tipo con el tipo primitivo indicado en el enum\r\n     * @param type Tipo seleccionado para la variable o funcion\r\n     * \r\n     */\r\n\r\n    constructor(tipo: Tipos){\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    toString(){\r\n        if(this.tipo === Tipos.BOOLEAN){\r\n            return \"boolean\";\r\n        }else if(this.tipo === Tipos.NUMBER){\r\n            return \"number\";\r\n        }else if(this.tipo === Tipos.STRING){\r\n            return \"string\";\r\n        }else if(this.tipo === Tipos.VOID){\r\n            return \"void\";\r\n        }else if(this.tipo === Tipos.TYPE){\r\n            return \"type\";\r\n        }else if(this.tipo === Tipos.ARRAY){\r\n            return \"Array\";\r\n        }\r\n    }\r\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar gramatica = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,15],$V4=[1,13],$V5=[5,7,14,18,20,23,29],$V6=[1,21],$V7=[1,26],$V8=[8,21],$V9=[1,37],$Va=[1,36],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,39],$Vj=[1,45],$Vk=[1,50],$Vl=[1,49],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[8,17,21,39,40,41,42,43,44,45,46,47,48,49,50,52,53],$Vz=[8,21,26],$VA=[1,98],$VB=[5,7,14,18,20,23,29,33],$VC=[8,17,21,39,40,45,46,47,48,49,50,52,53],$VD=[8,17,21,39,40,41,42,45,46,47,48,49,50,52,53],$VE=[8,17,21,45,46,47,48,49,50,52,53],$VF=[8,17,21,49,50,52,53];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"S\":3,\"INSTRUCCIONES\":4,\"EOF\":5,\"ERROR\":6,\"}\":7,\";\":8,\"INSTRUCCION\":9,\"CONSOLE\":10,\"DECLARACION\":11,\"ASIGNACION\":12,\"IF\":13,\"TK_CONSOLE\":14,\"(\":15,\"EXPRESION\":16,\")\":17,\"TK_CONST\":18,\"LISTA_DECLARACION\":19,\"TK_LET\":20,\",\":21,\"ID_DECLARACION\":22,\"TK_ID\":23,\":\":24,\"TIPO\":25,\"=\":26,\"LISTA_ASIGNACION\":27,\"ID_ASIGNACION\":28,\"TK_IF\":29,\"CONDICION\":30,\"BLOQUE_INSTRUCCIONES\":31,\"LISTA_IF\":32,\"TK_ELSE\":33,\"{\":34,\"ELSE_IF\":35,\"TK_STRING\":36,\"TK_BOOLEAN\":37,\"TK_NUMBER\":38,\"-\":39,\"+\":40,\"*\":41,\"/\":42,\"^\":43,\"%\":44,\"<\":45,\">\":46,\">=\":47,\"<=\":48,\"==\":49,\"!=\":50,\"!\":51,\"||\":52,\"&&\":53,\"TK_NUMERO\":54,\"TK_TRUE\":55,\"TK_FALSE\":56,\"TK_CADENAC\":57,\"TK_CADENAS\":58,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"}\",8:\";\",14:\"TK_CONSOLE\",15:\"(\",17:\")\",18:\"TK_CONST\",20:\"TK_LET\",21:\",\",23:\"TK_ID\",24:\":\",26:\"=\",29:\"TK_IF\",33:\"TK_ELSE\",34:\"{\",36:\"TK_STRING\",37:\"TK_BOOLEAN\",38:\"TK_NUMBER\",39:\"-\",40:\"+\",41:\"*\",42:\"/\",43:\"^\",44:\"%\",45:\"<\",46:\">\",47:\">=\",48:\"<=\",49:\"==\",50:\"!=\",51:\"!\",52:\"||\",53:\"&&\",54:\"TK_NUMERO\",55:\"TK_TRUE\",56:\"TK_FALSE\",57:\"TK_CADENAC\",58:\"TK_CADENAS\"},\nproductions_: [0,[3,2],[3,1],[6,2],[6,2],[4,2],[4,1],[9,1],[9,1],[9,1],[9,1],[10,5],[11,3],[11,3],[19,3],[19,1],[22,5],[22,3],[22,3],[22,1],[12,2],[27,3],[27,1],[28,3],[13,6],[13,4],[13,5],[13,3],[30,3],[31,3],[31,2],[32,2],[32,1],[35,4],[25,1],[25,1],[25,1],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nthis.$ = new AST($$[$0-1], errores); errores = []; return this.$;\nbreak;\ncase 2:\nthis.$ = new AST([], errores); errores = []; return this.$;\nbreak;\ncase 3: case 4:\nerrores.push(new Error(\"Sintactico\", \"Recuperado en: \" + $$[$0-1].yyreport_syntax_error + $$[$0-1], _$[$0].first_line, _$[$0].first_column));\nbreak;\ncase 5:\n this.$ = $$[$0-1];\r\n                                            if($$[$0] instanceof NodoAST){\r\n                                                this.$ = $$[$0-1]; this.$.push($$[$0]);\r\n                                            }\r\n                                          \nbreak;\ncase 6:\n if($$[$0] instanceof NodoAST){\r\n                                                this.$ = [$$[$0]];\r\n                                            }else{\r\n                                                this.$ = [];\r\n                                            }\r\n                                          \nbreak;\ncase 7: case 8: case 9: case 10:\nthis.$ = $$[$0];\nbreak;\ncase 11:\nthis.$ = new ConsoleLog($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 12:\nthis.$ = new Declaracion(true, $$[$0-1]);\nbreak;\ncase 13:\nthis.$ = new Declaracion(false, $$[$0-1]);\nbreak;\ncase 14:\nthis.$ = $$[$0-2]; this.$.push($$[$0]);\nbreak;\ncase 15: case 22: case 32:\nthis.$ = [$$[$0]];\nbreak;\ncase 16:\nthis.$ = new Identificador($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 17:\nthis.$ = new Identificador($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 18: case 23:\nthis.$ = new Identificador($$[$0-2], null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 19: case 58:\nthis.$ = new Identificador($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 20:\nthis.$ = new Asignacion($$[$0-1]);\nbreak;\ncase 21:\nthis.$ = $$[$0-2]; this.$.push($$[$0-1]);\nbreak;\ncase 24:\nthis.$ = new If($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);\nbreak;\ncase 25:\nthis.$ = new If($$[$0-2], $$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 26:\nthis.$ = new If($$[$0-3], $$[$0-2], null, $$[$01], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 27:\nthis.$ = new If($$[$0-1], $$[$0], null, null, _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 28: case 29: case 59:\nthis.$ = $$[$0-1];\nbreak;\ncase 30:\nthis.$ = [];\nbreak;\ncase 31:\nthis.$ =$$[$0-1]; this.$.push($$[$0]);\nbreak;\ncase 33:\nthis.$ = new If($$[$0-1], $$[$0], null, null, _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 34:\nthis.$ = new Tipo(Tipos.STRING);\nbreak;\ncase 35:\nthis.$ = new Tipo(Tipos.BOOLEAN);\nbreak;\ncase 36:\nthis.$ = new Tipo(Tipos.NUMBER);\nbreak;\ncase 37:\nthis.$ = new Aritmetica($$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 38:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 39:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 40:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 41:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 42:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 43:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 44:\nthis.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 45:\nthis.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 46:\nthis.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 47:\nthis.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 48:\nthis.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 49:\nthis.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 50:\nthis.$ = new Logica($$[$0], null, '!', _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 51:\nthis.$ = new Logica($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 52:\nthis.$ = new Logica($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 53:\nthis.$ = new Primitivo(new Tipo(Tipos.NUMBER), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 54:\nthis.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), true, _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 55:\nthis.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), false, _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 56:\nthis.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\\\\"/g,\"\\\"\"), _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 57:\n this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\\\'/g,\"'\"), _$[$0].first_line, _$[$0].first_column);\nbreak;\n}\n},\ntable: [{3:1,4:2,5:[1,3],9:4,10:5,11:6,12:7,13:8,14:$V0,18:$V1,20:$V2,23:$V3,27:12,28:14,29:$V4},{1:[3]},{5:[1,16],9:17,10:5,11:6,12:7,13:8,14:$V0,18:$V1,20:$V2,23:$V3,27:12,28:14,29:$V4},{1:[2,2]},o($V5,[2,6]),o($V5,[2,7]),o($V5,[2,8]),o($V5,[2,9]),o($V5,[2,10]),{15:[1,18]},{19:19,22:20,23:$V6},{19:22,22:20,23:$V6},{8:[1,23],21:[1,24]},{15:$V7,30:25},o($V8,[2,22]),{26:[1,27]},{1:[2,1]},o($V5,[2,5]),{15:$V9,16:28,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{8:[1,38],21:$Vi},o($V8,[2,15]),o($V8,[2,19],{24:[1,40],26:[1,41]}),{8:[1,42],21:$Vi},o($V5,[2,20]),{23:$V3,28:43},{31:44,34:$Vj},{15:$V9,16:46,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:47,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{17:[1,48],39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,52:$Vw,53:$Vx},{15:$V9,16:63,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:64,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($Vy,[2,53]),o($Vy,[2,54]),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),o($Vy,[2,58]),{15:$V9,16:65,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($V5,[2,12]),{22:66,23:$V6},{25:67,36:[1,68],37:[1,69],38:[1,70]},{15:$V9,16:71,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($V5,[2,13]),o($V8,[2,21]),o($V5,[2,27],{32:72,35:74,33:[1,73]}),{4:75,7:[1,76],9:4,10:5,11:6,12:7,13:8,14:$V0,18:$V1,20:$V2,23:$V3,27:12,28:14,29:$V4},{17:[1,77],39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,52:$Vw,53:$Vx},o($V8,[2,23],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,52:$Vw,53:$Vx}),{8:[1,78]},{15:$V9,16:79,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:80,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:81,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:82,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:83,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:84,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:85,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:86,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:87,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:88,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:89,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:90,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:91,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{15:$V9,16:92,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($Vy,[2,37]),o($Vy,[2,50]),{17:[1,93],39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,52:$Vw,53:$Vx},o($V8,[2,14]),o($V8,[2,17],{26:[1,94]}),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),o($V8,[2,18],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,52:$Vw,53:$Vx}),o($V5,[2,25],{35:96,33:[1,95]}),{29:$VA,31:97,34:$Vj},o($VB,[2,32]),{7:[1,99],9:17,10:5,11:6,12:7,13:8,14:$V0,18:$V1,20:$V2,23:$V3,27:12,28:14,29:$V4},o($VB,[2,30]),{34:[2,28]},o($V5,[2,11]),o($VC,[2,38],{41:$Vm,42:$Vn,43:$Vo,44:$Vp}),o($VC,[2,39],{41:$Vm,42:$Vn,43:$Vo,44:$Vp}),o($VD,[2,40],{43:$Vo,44:$Vp}),o($VD,[2,41],{43:$Vo,44:$Vp}),o($Vy,[2,42]),o($Vy,[2,43]),o($VE,[2,44],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp}),o($VE,[2,45],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp}),o($VE,[2,46],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp}),o($VE,[2,47],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp}),o($VF,[2,48],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt}),o($VF,[2,49],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt}),o([8,17,21,52],[2,51],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,53:$Vx}),o([8,17,21,52,53],[2,52],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv}),o($Vy,[2,59]),{15:$V9,16:100,23:$Va,39:$Vb,51:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{29:$VA,31:101,34:$Vj},o($VB,[2,31]),o($V5,[2,26]),{15:$V7,30:102},o($VB,[2,29]),o($V8,[2,16],{39:$Vk,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,52:$Vw,53:$Vx}),o($V5,[2,24]),{31:103,34:$Vj},o($VB,[2,33])],\ndefaultActions: {3:[2,2],16:[2,1],77:[2,28]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\r\n    //Carpeta AST\r\n    var {AST} = require(\"./AST/AST\");\r\n    var {Error} = require(\"./AST/Error\");\r\n    var {NodoAST} = require(\"./AST/NodoAST\");\r\n    var {Simbolo} = require(\"./AST/Simbolo\");\r\n    var {Tabla} = require(\"./AST/Tabla\");\r\n    var {Tipo,Tipos} = require(\"./AST/Tipo\");\r\n    \r\n\r\n    //Carpeta Expresion\r\n    var {Aritmetica} = require(\"./Expresion/Aritmetica\");\r\n    var {Primitivo} = require(\"./Expresion/Primitivo\");\r\n    var {Identificador} = require(\"./Expresion/Identificador\");\r\n    var {Relacional} = require(\"./Expresion/Relacional\");\r\n    var {Logica} = require(\"./Expresion/Logica\");\r\n    \r\n    \r\n    //Carpeta Instruccion\r\n    var {ConsoleLog} = require(\"./Instruccion/ConsoleLog\");\r\n    var {Declaracion} = require(\"./Instruccion/Declaracion\");\r\n    var {Asignacion} = require(\"./Instruccion/Asignacion\");\r\n    var {If} = require(\"./Instruccion/If\");\r\n\r\n\r\n    var errores = [];\r\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 'TK_CL';\nbreak;\ncase 1:return 'TK_CM';\nbreak;\ncase 2:return 36;\nbreak;\ncase 3:return 38;\nbreak;\ncase 4:return 37;\nbreak;\ncase 5:return 'TK_VOID';\nbreak;\ncase 6:return 'TK_ARRAY';\nbreak;\ncase 7:return 'TK_ARRAY';\nbreak;\ncase 8:return '++';\nbreak;\ncase 9:return '--';\nbreak;\ncase 10:return 40;\nbreak;\ncase 11:return 39;\nbreak;\ncase 12:return 41;\nbreak;\ncase 13:return 42;\nbreak;\ncase 14:return 43;\nbreak;\ncase 15:return 44;\nbreak;\ncase 16:return 49;\nbreak;\ncase 17:return 50;\nbreak;\ncase 18:return 47;\nbreak;\ncase 19:return 46;\nbreak;\ncase 20:return 48;\nbreak;\ncase 21:return 45;\nbreak;\ncase 22:return 53;\nbreak;\ncase 23:return 52;\nbreak;\ncase 24:return 51;\nbreak;\ncase 25:return 15;\nbreak;\ncase 26:return 17;\nbreak;\ncase 27:return 34;\nbreak;\ncase 28:return 7;\nbreak;\ncase 29:return 8;\nbreak;\ncase 30:return 24;\nbreak;\ncase 31:return 21;\nbreak;\ncase 32:return 26;\nbreak;\ncase 33:return '.';\nbreak;\ncase 34:return 'TK_FUNCTION';\nbreak;\ncase 35:return 29;\nbreak;\ncase 36:return 33;\nbreak;\ncase 37:return 'TK_SWITCH';\nbreak;\ncase 38:return 'TK_CASE';\nbreak;\ncase 39:return 'TK_DO';\nbreak;\ncase 40:return 'TK_WHILE';\nbreak;\ncase 41:return 'TK_FOR';\nbreak;\ncase 42:return 'TK_IN';\nbreak;\ncase 43:return 'TK_OF';\nbreak;\ncase 44:return 'TK_CONTINUE';\nbreak;\ncase 45:return 'TK_RETURN';\nbreak;\ncase 46:return 'TK_BREAK';\nbreak;\ncase 47:return 'TK_DEFAULT';\nbreak;\ncase 48:return 'TK_PUSH';\nbreak;\ncase 49:return 'TK_POP';\nbreak;\ncase 50:return 'TK_LENGTH';\nbreak;\ncase 51:return 20;\nbreak;\ncase 52:return 18;\nbreak;\ncase 53:return 14;\nbreak;\ncase 54:return 'TK_GRAFICAR';\nbreak;\ncase 55:return 55;\nbreak;\ncase 56:return 56;\nbreak;\ncase 57:return 57;\nbreak;\ncase 58:return 23;\nbreak;\ncase 59:return 54;\nbreak;\ncase 60:return 58;\nbreak;\ncase 61:\nbreak;\ncase 62:errores.push(new Error(\"Lexico\", yy_.yytext+\" No pertenece al lenguaje\", yy_.yylloc.first_line, yy_.yylloc.first_column));\nbreak;\ncase 63:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\/\\/[^\\n]*)/,/^(?:\\/\\*(\\*|\\/|[^\"*/\"])*\\*\\/)/,/^(?:string\\b)/,/^(?:number\\b)/,/^(?:boolean\\b)/,/^(?:void\\b)/,/^(?:Array\\b)/,/^(?:type\\b)/,/^(?:\\+\\+)/,/^(?:--)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:\\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\\|\\|)/,/^(?:!)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{)/,/^(?:\\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:\\.)/,/^(?:function\\b)/,/^(?:if\\b)/,/^(?:else\\b)/,/^(?:switch\\b)/,/^(?:case\\b)/,/^(?:do\\b)/,/^(?:while\\b)/,/^(?:for\\b)/,/^(?:in\\b)/,/^(?:of\\b)/,/^(?:continue\\b)/,/^(?:return\\b)/,/^(?:break\\b)/,/^(?:default\\b)/,/^(?:push\\b)/,/^(?:pop\\b)/,/^(?:length\\b)/,/^(?:let\\b)/,/^(?:const\\b)/,/^(?:console\\.log\\b)/,/^(?:graficar_ts\\b)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:\"((\\\\\")?|[^\\\"])*\")/,/^(?:[A-Za-z\"_\"][A-Za-z\"_\"0-9]*)/,/^(?:[0-9]+(\\.[0-9]+)?)/,/^(?:'((\\\\')|[^\"'\"])*')/,/^(?:[ \\r\\t\\n]+)/,/^(?:.)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = gramatica;\nexports.Parser = gramatica.Parser;\nexports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n/*\r\nimport { Continue } from \"../Expresiones/Continue\";\r\nimport { Break } from \"../Expresiones/Break\";*/\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class If extends NodoAST {\r\n    condicion:NodoAST;\r\n    sentenciasIF:NodoAST[];\r\n    listaIFS:NodoAST[];\r\n    sentenciasELSE:NodoAST[];\r\n    entro:boolean;\r\n\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(condicion:NodoAST, sentenciasIF:NodoAST[], listaIFS:NodoAST[], sentenciasELSE:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.condicion = condicion;\r\n        this.sentenciasIF = sentenciasIF;\r\n        this.listaIFS = listaIFS;\r\n        this.sentenciasELSE = sentenciasELSE;\r\n        this.entro = null;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const nuevoEntorno = new Tabla(tabla);\r\n        let result:NodoAST;\r\n        result = this.condicion.ejecutar(nuevoEntorno, ast);\r\n        if (result instanceof Error) {\r\n            return result;\r\n        }\r\n\r\n        if (this.condicion.tipo.tipo != Tipos.BOOLEAN) {\r\n            const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        if (result) {\r\n            if(this.sentenciasIF != null){\r\n                this.sentenciasIF.map((m:If) =>{\r\n                    m.ejecutar(nuevoEntorno, ast);\r\n                    //if(res instanceof Continue || res instanceof Break){\r\n                    //    return null;\r\n                    //}\r\n                });\r\n                this.entro = true;\r\n            }\r\n            \r\n        } else {\r\n            if(this.listaIFS != null){\r\n                this.listaIFS.map((m:If) =>{\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    \r\n                    if(m.entro){\r\n                        this.entro = true;\r\n                        return null;\r\n                    }\r\n\r\n                    if (res instanceof Error) {\r\n                        return res;\r\n                    }\r\n                });\r\n\r\n            }\r\n            \r\n            if(this.sentenciasELSE != null && !this.entro){\r\n                this.sentenciasELSE.map((m:If) =>{\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    //if(res instanceof Continue || res instanceof Break){\r\n                    //    return null;\r\n                    //}\r\n                });\r\n                this.entro = true;\r\n            }\r\n            \r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * Crea un nuevo objeto Nodo expresion en base a un valor primitivo,\r\n * por ejemplo numeros, booleanos o cadenas(suponiendo que la cadena es primitivo)\r\n */\r\nexport class Primitivo extends NodoAST{\r\n    valor:object;\r\n\r\n    /**\r\n     * @constructor Devuelve un nodo que internamente sera una expresion por tener un tipo\r\n     * @param tipo Tipo del valor, puede ser numero, cadena o booleano\r\n     * @param valor Valor primitivo que crear\r\n     * @param fila Fila de donde se creo la sentencia\r\n     * @param columna columnaa donde se creo la sentencia\r\n     */\r\n    constructor(tipo:Tipo, valor:object, fila:number, columna:number){\r\n        super(tipo, fila, columna);\r\n        this.valor = valor;\r\n    }\r\n\r\n    /**\r\n     * Devuelve el valor inicial e.g. 4\r\n     * @param table Tabla de simbolos\r\n     * @param tree Arbol de instrucciones y excepciones\r\n     */\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        return this.valor;\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * @class Genera un nuevo nodo expresion para realizar operaciones relacionales\r\n */\r\n\r\nexport class Relacional extends NodoAST {\r\n    izquierdo:NodoAST;\r\n    derecho:NodoAST;\r\n    operador:string;\r\n\r\n    /**\r\n     * @constructor Devuelve el nodo expresion para ser utilizado con otras operaciones\r\n     * @param izquierdo Nodo expresion izquierdo\r\n     * @param derecho Nodo expresion derecho\r\n     * @param operador Operador\r\n     * @param fila filaa de la operacion\r\n     * @param columna columnaa de la operacion\r\n     */\r\n\r\n    constructor(izquierdo:NodoAST, derecho:NodoAST, operador:string, fila:number, columna:number) {\r\n        super(new Tipo(Tipos.BOOLEAN), fila, columna);\r\n        this.izquierdo = izquierdo;\r\n        this.derecho = derecho;\r\n        this.operador = operador;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        const LeftResult = this.izquierdo.ejecutar(tabla, ast);\r\n        if (LeftResult instanceof Error) {\r\n            return LeftResult;\r\n        }\r\n\r\n        /*if(this.derecho == null){\r\n            if(this.operador == '!'){\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return !LeftResult;\r\n                }else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipo en NEGACION se esta tratando de operar \" + this.izquierdo.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }\r\n        }else{*/\r\n            const RightResult = this.derecho.ejecutar(tabla, ast);\r\n            if (RightResult instanceof Error) {\r\n                return RightResult;\r\n            }\r\n\r\n            if (this.operador == '<') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                    return LeftResult < RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en MENOR QUE se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(),this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '>') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                    return LeftResult > RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en MAYOR QUE se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '>=') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                    return LeftResult >= RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en MAYOR IGUAL se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '<=') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                    return LeftResult <= RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en MENOR IGUAL se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '!=') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                    return LeftResult != RightResult;\r\n                } else if (this.izquierdo.tipo.tipo == Tipos.STRING && this.derecho.tipo.tipo == Tipos.STRING) {\r\n                    return LeftResult != RightResult;\r\n                }else if(this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return LeftResult != RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en DIFERENTE QUE se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '==') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                    return LeftResult == RightResult;\r\n                }else if(this.izquierdo.tipo.tipo == Tipos.STRING && this.derecho.tipo.tipo == Tipos.STRING) {\r\n                    return LeftResult == RightResult;\r\n                }else if(this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return LeftResult == RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en IGUAL IGUAL se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else{\r\n                const error = new Error(\"Semantico\", \"Error operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n\r\n        /*}*/\r\n    }\r\n}","import {NodoAST} from \"../AST/NodoAST\"\r\nimport {Tabla} from \"../AST/Tabla\";\r\nimport {AST} from \"../AST/AST\";\r\nimport {Error} from \"../AST/Error\";\r\nimport {Tipo, Tipos} from \"../AST/Tipo\";\r\nimport {Simbolo} from \"../AST/Simbolo\";\r\nimport { Identificador } from '../Expresion/Identificador';\r\n\r\n/**\r\n * @class Inserta una nueva variable en la tabla de simbolos\r\n */\r\nexport class Declaracion extends NodoAST {\r\n    constante:boolean;\r\n    declaraciones:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia Declaracion\r\n     * @param type Tipo de la variable\r\n     * @param identifier nombre de la variable\r\n     * @param valor valor de la variable\r\n     * @param line Linea de la sentencia if\r\n     * @param column Columna de la sentencia if\r\n     */\r\n    constructor(constante:boolean, declaraciones:NodoAST[], fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n        this.constante = constante;\r\n        this.declaraciones = declaraciones;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n\r\n        this.declaraciones.map((m:Identificador) =>{\r\n            if(this.constante == true){\r\n                if(m.valor == null){\r\n                    const error = new Error(\"Semantico\", \"Constante \" + m.identificador + \" no inicializada \", m.fila, m.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n\r\n                }else{\r\n                    const result = m.valor.ejecutar(tabla, ast);\r\n                    if (result instanceof Error) {\r\n                        return result;\r\n                    }\r\n\r\n                    if(m.tipo == null){\r\n                        m.tipo = m.valor.tipo;\r\n                    }else if (m.tipo.tipo != m.valor.tipo.tipo) {\r\n                        const error = new Error(\"Semantico\", \"No se puede declarar la variable \" + m.identificador + \" los tipos no coinciden\", m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }\r\n\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(m.tipo, m.identificador, result, this.constante);\r\n                    const res = tabla.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                    }\r\n                    return null;\r\n                }\r\n\r\n            }else{\r\n                if(m.valor == null){\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(m.tipo, m.identificador, null, this.constante);\r\n                    const res = tabla.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                    }\r\n                    return null;\r\n\r\n                }else{\r\n                    const result = m.valor.ejecutar(tabla, ast);\r\n                    if (result instanceof Error) {\r\n                        return result;\r\n                    }\r\n\r\n                    if(m.tipo == null){\r\n                        m.tipo = m.valor.tipo;\r\n                    }else if (m.tipo.tipo != m.valor.tipo.tipo) {\r\n                        const error = new Error(\"Semantico\", \"No se puede declarar la variable \" + m.identificador + \" porque los tipos no coinciden.\", m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }\r\n\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(m.tipo, m.identificador, result, this.constante);\r\n                    const res = tabla.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                    }\r\n                    return null;\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n}","/**\r\n * @class Nodo para almacenar errores ya sean lexicos, sintacticos o semanticos\r\n */\r\n\r\nexport class Error{\r\n    tipo:string;\r\n    descripcion:string;\r\n    fila:number;\r\n    columna:number;\r\n\r\n    /**\r\n     * Devuelve un objeto con un nuevo objeto excepcion\r\n     * @param type Tipo de error, e.g. (lexico, sintactico, semantico)\r\n     * @param description Descripcion del error, e.g. (No se encontro la variable X)\r\n     * @param line Fila donde ocurrio el error\r\n     * @param column Columna donde ocurrio el error\r\n     */\r\n\r\n    constructor(tipo:string, descripcion:string, fila:number, columna:number){\r\n        this.tipo = tipo;\r\n        this.descripcion = descripcion;\r\n        this.fila = fila;\r\n        this.columna = columna;\r\n    }\r\n\r\n    toString(){\r\n        return \"Tipo:\" + this.tipo + \" Descripcion:\" + this.descripcion + \" Fila:\" + this.fila + \" Columna:\" + this.columna;\r\n    }\r\n\r\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Proyecto1';\n}\n","\n<app-pagina></app-pagina>\n<router-outlet></router-outlet>","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * @class Genera un nuevo nodo expresion para realizar operaciones aritmeticas\r\n */\r\n\r\nexport class Aritmetica extends NodoAST {\r\n    izquierdo:NodoAST;\r\n    derecho:NodoAST;\r\n    operacion:string;\r\n\r\n    /**\r\n     * @constructor Devuelve el nodo expresion para ser utilizado con otras operaciones\r\n     * @param izquierdo Nodo expresion izquierdo\r\n     * @param derecho Nodo expresion derecho\r\n     * @param operacion Operador\r\n     * @param fila filaa de la operacion\r\n     * @param columna columnaa de la operacion\r\n     */\r\n\r\n    constructor(izquierdo:NodoAST, derecho:NodoAST, operacion:string, fila:number, columna:number) {\r\n        // Envio null porque aun no se el tipo de la operación\r\n        super(null, fila, columna);\r\n        this.izquierdo = izquierdo;\r\n        this.derecho = derecho;\r\n        this.operacion = operacion;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        if(this.derecho != null){\r\n            const operacionIzq = this.izquierdo.ejecutar(tabla, ast);\r\n            if(operacionIzq instanceof Error){\r\n                return operacionIzq;\r\n            }\r\n            const operacionDer = this.derecho.ejecutar(tabla, ast);\r\n            if(operacionDer instanceof Error){\r\n                return operacionDer;\r\n            }\r\n\r\n            if(this.operacion == '+'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq + operacionDer;\r\n                }else if(this.izquierdo.tipo.tipo == Tipos.STRING || this.derecho.tipo.tipo == Tipos.STRING){\r\n                    this.tipo = new Tipo(Tipos.STRING);\r\n                    return operacionIzq + operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> se esta tratando de sumar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '-'){\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq - operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> se esta tratando de restar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '*'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq * operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\",\"Error de Tipos -> se esta tratando de multiplicar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '/'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    if(operacionDer == 0){\r\n                        const error = new Error(\"Semantico\", \"Error aritmetico -> se esta tratando de dividir entre cero \", this.fila, this.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }\r\n                    return operacionIzq / operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> se esta tratando de dividir \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '^'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    if(operacionDer == 0){\r\n                        return 1;\r\n                    }else{\r\n                        let numero = operacionIzq;\r\n                        for (let index = 0; index < operacionDer-1; index++) {\r\n                            numero = numero*operacionIzq;   \r\n                        }\r\n                        return numero;\r\n                    }\r\n                    //return operacionIzq ^ operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\",\"Error de Tipos -> se esta tratando de elevar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '%'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq % operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\",\"Error de Tipos -> se esta tratando de obtener el modulo \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else{\r\n                const error = new Error(\"Semantico\", \"Error, Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n\r\n        }else{\r\n            const operacionIzq = this.izquierdo.ejecutar(tabla, ast);\r\n            if(operacionIzq instanceof Error){\r\n                return operacionIzq;\r\n            }\r\n            \r\n            if(this.operacion == '-'){\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return -1*operacionIzq;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> el operador unario tratando de operar \" + this.izquierdo.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else{\r\n                const error = new Error(\"Semantico\", \"Error -> Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Simbolo } from \"../AST/Simbolo\";\r\nimport { Identificador } from '../Expresion/Identificador';\r\n\r\n/**\r\n * @class Reasigna el valor de una variable existente\r\n */\r\n\r\nexport class Asignacion extends NodoAST {\r\n    asignaciones:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia Asignacion\r\n     * @param identificador nombre de la variable\r\n     * @param valor valor de la variable\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(asignaciones:NodoAST[], fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n        this.asignaciones = asignaciones;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        this.asignaciones.map((m) =>{\r\n            if(m instanceof Identificador){\r\n                const result = m.valor.ejecutar(tabla, ast);\r\n                if (result instanceof Error) {\r\n                    return result;\r\n                }\r\n\r\n                let variable:Simbolo;\r\n                variable = tabla.getVariable(m.identificador);\r\n                if (variable == null) {\r\n                    const error = new Error(\"Semantico\",\"No se ha encontrado la variable \" + m.identificador, m.fila, m.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }else if(variable.constante == true){\r\n                    const error = new Error(\"Semantico\",\"No se puede asignar un nuevo valor a la constante \" + m.identificador, m.fila, m.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n\r\n                if(variable.tipo == null){\r\n                    variable.tipo = m.valor.tipo;\r\n                }else if (m.valor.tipo.tipo != variable.tipo.tipo) {\r\n                    const error = new Error(\"Semantico\",\"No se puede asignar la variable porque los tipos no coinciden\", m.fila, m.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n\r\n                variable.valor = result;\r\n                return null;\r\n\r\n            }\r\n        });\r\n/*\r\n        const result = this.valor.ejecutar(tabla, ast);\r\n        if (result instanceof Error) {\r\n            return result;\r\n        }\r\n\r\n        let variable:Simbolo;\r\n        variable = tabla.getVariable(this.identificador);\r\n        if (variable == null) {\r\n            const error = new Error('Semantico',\r\n                'No se ha encontrado la variable ' + this.identificador,\r\n                this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n\r\n        if (this.valor.tipo.tipo != variable.tipo.tipo) {\r\n            const error = new Error('Semantico',\r\n                `No se puede asignar la variable porque los tipos no coinciden.`,\r\n                this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        variable.valor = result;\r\n        return error;*/\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PaginaComponent } from './pagina/pagina.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PaginaComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n//Carpeta AST\nimport { AST } from \"./Ejecucion/AST/AST\";\nimport { Error } from \"./Ejecucion/AST/Error\";\nimport { NodoAST } from \"./Ejecucion/AST/NodoAST\";\nimport { Simbolo } from \"./Ejecucion/AST/Simbolo\";\nimport { Tabla } from \"./Ejecucion/AST/Tabla\";\nimport { Tipo,Tipos } from \"./Ejecucion/AST/Tipo\";\n\n//Carpeta Expresion\nimport { Aritmetica } from \"./Ejecucion/Expresion/Aritmetica\";\nimport { Primitivo } from \"./Ejecucion/Expresion/Primitivo\";\nimport { Logica } from \"./Ejecucion/Expresion/Logica\";\nimport { Relacional } from \"./Ejecucion/Expresion/Relacional\";\n\n//Carpeta Instruccion\nimport { ConsoleLog } from \"./Ejecucion/Instruccion/ConsoleLog\";\nimport { Declaracion } from './Ejecucion/Instruccion/Declaracion';\nimport { Asignacion } from './Ejecucion/Instruccion/Asignacion';\nimport { If } from './Ejecucion/Instruccion/If';\n\n//Analizador\nvar parser  = require(\"./Ejecucion/gramatica.js\");\n\n@Component({\n  selector: 'app-pagina',\n  templateUrl: './pagina.component.html',\n  styleUrls: ['./pagina.component.css']\n})\nexport class PaginaComponent implements OnInit {\n\n  constructor() {\n    \n  }\n\n  texto(){\n    let a = 'const a =10;\\nlet b = false;\\nif( !b && a != 10 ){\\nconsole.log(\"ah... :v\");\\n}else if( true || !true){\\nconsole.log(\"que\");\\n}else{\\nconsole.log(\"rico\");\\n}';\n    document.getElementById('txtEntrada').innerHTML = a;\n  }\n\n  ngOnInit(): void {\n  }\n\n  //aqui va todo el codigo xd\n  exec(){\n    this.texto();\n\n    var entrada = (document.getElementById(\"txtEntrada\") as HTMLInputElement).value;\n    \n    let ast:AST = parser.parse(entrada);\n    let tabla:Tabla= new Tabla(null);\n    \n    ast.instrucciones.map((m) =>{\n      if(m instanceof Declaracion){\n        m.ejecutar(tabla, ast);\n      }\n    });\n\n    console.log(tabla);\n\n    ast.instrucciones.map((m) =>{\n      if(!(m instanceof Declaracion)){\n        m.ejecutar(tabla, ast);\n      }\n    });\n\n    console.log(ast);\n\n    let a:string = \"\";\n    ast.consola.map((m) =>{\n      a += m+\"\\n\";\n    });\n\n    ast.errores.map((m) =>{\n      console.log(m.toString());\n    });\n\n    //var json = JSON.stringify(ast,null,3);\n    //console.log(json);\n    document.getElementById('txtSalida').innerHTML = a;\n\n    //json = json.split('lexema').join('text').split('lista').join('children').split('lista').join('children');\n    /*\n    var e = (document.getElementById(\"txtEntrada\") as HTMLInputElement).value;\n    console.log(\"entro\");\n\n    console.log(e);\n    document.getElementById('txtSalida').innerHTML = e;\n\n    var ast = parser.parse(entrada);\n    */\n  }\n\n}\n\n","\n<nav class=\"navbar navbar-light bg-secondary\">\n    <div class=\"container\">\n        <h1>MatrioshTS</h1>\n    </div>\n    \n</nav>\n\n<div class=\"card-group p-5\" role=\"group\">\n    <div  class=\"card bg-success\">\n        <h4 _ngcontent-srk-c16=\"\" class=\"list-group-item list-group-item-primary text-center text-success bg-light\">Entrada</h4>\n        <div _ngcontent-srk-c16=\"\" class=\"card-body p-3 mb-2 bg-transparent\">\n            <textarea _ngcontent-srk-c16=\"\" id=\"txtEntrada\" rows=\"15\" class=\"form-control ng-pristine ng-valid ng-touched bg-dark text-light\"></textarea>\n        </div>\n            <button _ngcontent-srk-c16=\"\" (click)=\"exec()\" type=\"button\" id=\"btnEjecutar\" class=\"btn p-2 mb-1 btn-outline-success btn-lg bg-warning text-light\">Ejecutar</button>\n            <button _ngcontent-srk-c16=\"\" type=\"button\" id=\"tbnTraducir\" class=\"btn p-2 mb-1 btn-outline-success btn-lg bg-info text-light\">Traducir</button>\n    </div>\n    <div _ngcontent-srk-c16=\"\" class=\"card bg-danger\">\n        <h4 _ngcontent-srk-c16=\"\" class=\"list-group-item list-group-item-primary text-center text-danger bg-light\">Salida</h4>\n        <div _ngcontent-srk-c16=\"\" class=\"card-body  bg-secondary btn-lg bg-danger\">\n            <textarea _ngcontent-srk-c16=\"\" readonly=\"\" id=\"txtSalida\" rows=\"15\" class=\"form-control ng-pristine ng-valid ng-touched bg-dark text-light\"></textarea>\n        </div>\n            <button _ngcontent-srk-c16=\"\" type=\"button\" id=\"btnAST\" class=\"btn p-2 mb-1 btn-outline-danger btn-lg bg-primary text-light\">AST</button>\n            <button _ngcontent-srk-c16=\"\" type=\"button\" id=\"btnErrores\" class=\"btn p-2 mb-1 btn-outline-danger btn-lg bg-secondary text-light\">Errores</button>\n\n    </div>\n</div>\n\n<div class=\"card-group p-5\"  role=\"group\">\n    <div  class=\"card bg-transparent\"  id=\"salidaAST\">\n        \n    </div>\n</div>","import { Simbolo } from \"./Simbolo\";\r\n\r\n/**\r\n * @class En esta clase es donde vamos a guardar y obtener las variables y funciones\r\n */\r\n\r\nexport class Tabla{\r\n    anterior:Tabla;\r\n    variables:Map<String, Simbolo>;\r\n\r\n    /**\r\n     * @constructor Crea una nueva tabla\r\n     * @param Previous Tabla anterior para manejar los ambitos\r\n     */\r\n\r\n    constructor(anterior:Tabla){\r\n        this.anterior = anterior;\r\n        this.variables = new Map<String, Simbolo>();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @method setVariable Almacena una variable, si ya existe arroja error\r\n     * @param simbol Simbolo que contiene la informacion de la variable a almacenar\r\n     */\r\n\r\n    setVariable(simbolo:Simbolo){\r\n        let env:Tabla=this;\r\n        //for(env = this; env != null; env = env.anterior){\r\n        for(let key of Array.from( env.variables.keys()) ) {\r\n            if(key == simbolo.id){\r\n                return \"La variable \" + key + \" ya ha sido declarada\";\r\n            }\r\n        }\r\n        //}\r\n        this.variables.set(simbolo.id, simbolo);\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @method getVariable Obtiene una variable dentro de la tabla de simbolos\r\n     * @param identifier Nombre de la variable a obtener\r\n     */\r\n\r\n    getVariable(id:string):Simbolo{\r\n        let env:Tabla;\r\n        for(env = this; env != null; env = env.anterior){\r\n            for(let key of Array.from(env.variables.keys())) {\r\n                if(key == id){\r\n                    return env.variables.get(key);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n   \r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * @class Genera un nuevo nodo expresion para realizar operaciones logicas\r\n */\r\n\r\n export class Logica extends NodoAST {\r\n    izquierdo:NodoAST;\r\n    derecho:NodoAST;\r\n    operador: string;\r\n\r\n    /**\r\n     * @constructor Devuelve el nodo expresion para ser utilizado con otras operaciones\r\n     * @param izquierdo Nodo expresion izquierdo\r\n     * @param derecho Nodo expresion derecho\r\n     * @param operador Operador\r\n     * @param fila filaa de la operacion\r\n     * @param columna columnaa de la operacion\r\n     */\r\n    constructor(izquierdo: NodoAST, derecho: NodoAST, operador: string, fila: number, columna: number) {\r\n        super(new Tipo(Tipos.BOOLEAN), fila, columna);\r\n        this.izquierdo = izquierdo;\r\n        this.derecho = derecho;\r\n        this.operador = operador;\r\n    }\r\n\r\n    ejecutar(tabla: Tabla, ast: AST) {\r\n        if (this.derecho != null) {\r\n            const LeftResult = this.izquierdo.ejecutar(tabla, ast);\r\n            if (LeftResult instanceof Error) {\r\n                return LeftResult;\r\n            }\r\n\r\n            const RightResult = this.derecho.ejecutar(tabla, ast);\r\n            if (RightResult instanceof Error) {\r\n                return RightResult;\r\n            }\r\n\r\n            if (this.operador == '||') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return LeftResult || RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en OR se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.tostring());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '&&') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return LeftResult && RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en AND se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.tostring());\r\n                    return error;\r\n                }\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error, Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.tostring());\r\n                return error;\r\n            }\r\n\r\n        } else {\r\n            const LeftResult = this.izquierdo.ejecutar(tabla, ast);\r\n            if (LeftResult instanceof Error) {\r\n                return LeftResult;\r\n            }\r\n\r\n            if (this.operador == '!') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return !LeftResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en el operador NOT se esta tratando de operar\" + this.izquierdo.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.tostring());\r\n                    return error;\r\n                }\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error, Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.tostring());\r\n                return error;\r\n            }\r\n            \r\n        }\r\n    }\r\n}","import { NodoAST } from './NodoAST';\r\nimport { Error } from \"./Error\";\r\n\r\n/**\r\n * @class Almacena el ast y ademas la lista de excepciones\r\n */\r\n\r\nexport class AST{\r\n    instrucciones:NodoAST[];\r\n    errores:Error[];\r\n    consola:string[];\r\n\r\n    /**\r\n     * Retorna un arbol con 2 atributos: 1 ast y 1 lista de excepciones\r\n     * @param instructions AST generado por la gramatica\r\n     */\r\n\r\n    constructor(instrucciones:NodoAST[], errores:Error[]) {\r\n        this.instrucciones = instrucciones;\r\n        this.errores = errores;\r\n        this.consola = [];\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Tipo } from \"./Tipo\";\r\n\r\n/**\r\n * @class Esta clase me permite almacenar nodos en mis tablas de simbolos y de funciones \r\n */\r\n\r\nexport class Simbolo{\r\n    tipo:Tipo;\r\n    id:string;\r\n    valor:Object;\r\n    constante:boolean;\r\n\r\n    /**\r\n     * @constructor Para crear un nuevo simbolo a utilizar en una tabla de simbolos o funciones\r\n     * @param type Tipo de la varible o funcion\r\n     * @param identifier Nombre de la variable o funcion\r\n     * @param value Valor de la variable u objeto completo de la función\r\n     */\r\n\r\n    constructor(tipo:Tipo, id:string, valor:Object, constante:boolean) {\r\n        this.tipo = tipo;\r\n        this.id = id;\r\n        this.valor = valor;\r\n        this.constante = constante;\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}