{"version":3,"sources":["./src/app/pagina/Ejecucion/AST/NodoAST.ts","fs (ignored)","path (ignored)","./src/app/pagina/Ejecucion/Instruccion/graficar_ts.ts","./src/app/pagina/Ejecucion/Instruccion/Switch.ts","./src/app/pagina/Ejecucion/Instruccion/For.ts","./src/app/pagina/Ejecucion/Instruccion/Funcion.ts","./src/app/pagina/Ejecucion/Expresion/Identificador.ts","./src/environments/environment.ts","./src/app/pagina/Ejecucion/Instruccion/ConsoleLog.ts","./src/app/pagina/Ejecucion/AST/Tipo.ts","./src/app/pagina/Ejecucion/gramatica.js","./src/app/pagina/Ejecucion/Instruccion/If.ts","./src/app/pagina/Ejecucion/Expresion/Primitivo.ts","./src/app/pagina/Ejecucion/Expresion/Relacional.ts","./src/app/pagina/Ejecucion/Expresion/Return.ts","./src/app/pagina/Ejecucion/Instruccion/UsoFuncion.ts","./src/app/pagina/Ejecucion/Instruccion/Declaracion.ts","./src/app/pagina/Ejecucion/Expresion/Break.ts","./src/app/pagina/Ejecucion/graficarAST.ts","./src/app/pagina/Ejecucion/AST/Error.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/pagina/Ejecucion/Expresion/Aritmetica.ts","./src/app/pagina/Ejecucion/Instruccion/Asignacion.ts","./src/app/app.module.ts","./src/app/pagina/Ejecucion/Instruccion/Ternario.ts","./src/app/pagina/pagina.component.ts","./src/app/pagina/pagina.component.html","./src/app/pagina/Ejecucion/Instruccion/While.ts","./src/app/pagina/Ejecucion/AST/Tabla.ts","./src/app/pagina/Ejecucion/Instruccion/Case.ts","./src/app/pagina/Ejecucion/Expresion/Logica.ts","./src/app/pagina/Ejecucion/Instruccion/DoWhile.ts","./src/app/pagina/Ejecucion/AST/AST.ts","./src/app/pagina/Ejecucion/Expresion/Continue.ts","./src/app/app-routing.module.ts","./src/app/pagina/Ejecucion/AST/Simbolo.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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OAAO,MAAM,CAAC;SACjB;aAAK,IAAG,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,KAAK,EAAC;YAC/B,OAAO,OAAO,CAAC;SAClB;IACL,CAAC;CACJ;;;;;;;;;;;;AC3CD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,sDAAsD,MAAM,gmBAAgmB,geAAge;AACvoC,aAAa,sBAAsB,MAAM,4NAA4N,+VAA+V;AACpmB;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA,8BAA8B,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4VAA4V,UAAU,SAAS;AAC/W,aAAa,WAAW;AACxB,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;AC7jCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACH;AAEA;AACI;AACQ;AACN;AACE;AAE7C;;GAEG;AAEI,MAAM,EAAG,SAAQ,oDAAO;IAQ3B;;;;;;;OAOG;IAEH,YAAY,SAAiB,EAAE,YAAsB,EAAE,QAAkB,EAAE,cAAwB,EAAE,IAAW,EAAE,OAAc;QAC5H,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAA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","file":"main.js","sourcesContent":["import { Tipo } from \"./Tipo\";\r\nimport { AST } from \"./AST\";\r\nimport { Tabla } from './Tabla';\r\n\r\nexport abstract class NodoAST{\r\n    tipo:Tipo;\r\n    fila:number;\r\n    columna:number;\r\n\r\n    /**\r\n     * @abstract Metodo que sirver para ejecutar una instruccion o expresion\r\n     * si fuera instruccion devuelve nulo y si fuera expresion devuelve un valor\r\n     */\r\n\r\n    abstract ejecutar(tabla:Tabla, ast:AST);\r\n \r\n    /**\r\n     * \r\n     * @constructor Base para cualquier instruccion o expresion, omitir tipo si fuera una instruccion\r\n     * @param type Tipo de la expresion, si fuera una expresion poner valor de nulo\r\n     * @param line Linea de la instruccion o expresion\r\n     * @param column Columna de la instruccion o expresion\r\n     */\r\n\r\n    constructor(tipo:Tipo, fila:number, columna:number) {\r\n        this.tipo = tipo;\r\n        this.fila = fila;\r\n        this.columna = columna;\r\n    }\r\n\r\n}\r\n","/* (ignored) */","/* (ignored) */","import pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport { PdfMakeWrapper, Table, Txt } from \"pdfmake-wrapper\";\r\nimport pdfMake from \"pdfmake/build/pdfmake\";\r\n\r\nimport { AST } from \"../AST/AST\";\r\nimport { NodoAST } from \"../AST/NodoAST\";\r\nimport { Simbolo } from \"../AST/Simbolo\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\n\r\nimport { Funcion } from \"./Funcion\";\r\n\r\nexport class graficar_ts extends NodoAST{\r\n    tabla:Tabla;\r\n\r\n    constructor(fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.tabla = null;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        this.tabla = tabla;\r\n        this.otro2();\r\n        return null;\r\n    };\r\n\r\n/*\r\n    generarPDF() {\r\n        const pdf = new PdfMakeWrapper();\r\n        let titulo=\"Reporte De errores En Ejecucion\";\r\n\r\n        let tituloPDF=new Txt(titulo).alignment(\"center\").end;\r\n        pdf.add(tituloPDF);\r\n        pdf.add(\"\\n\");\r\n\r\n        let tabla=new Table([ [ \"Typo\",\"Descripcion\",\"Linea\",\"Columna\"]]).widths([ 60, 350 ,30,50]).alignment(\"center\").end;\r\n        pdf.add(tabla);\r\n\r\n        this.listaErroresEjecucion.forEach(element =>{\r\n            let tabla=new Table([[ element.type,element.description,element.line,element.column]]).widths([ 60, 350,30,50 ]).alignment(\"center\").end;\r\n            pdf.add(tabla);\r\n        });\r\n\r\n        pdf.create().open();\r\n\r\n    }\r\n\r\n    ast(element):any{\r\n        let exp = new Nodo_AST(\"Expresion\",null,[]);\r\n        if(element instanceof Arithmetic){\r\n            if(element.leftOperator != null){\r\n                let izq: Nodo_AST= this.ast(element.leftOperator);\r\n                izq.parent = exp;\r\n                exp.children.push(izq);\r\n            }\r\n\r\n            exp.children.push(new Nodo_AST(element.Operator,exp,[]));\r\n            if(element.rightOperator != null){\r\n                let der: Nodo_AST= this.ast(element.rightOperator);\r\n                der.parent = exp;\r\n                exp.children.push(der);\r\n            }\r\n\r\n        }else if(element instanceof Primitive){\r\n            let hijo = new Nodo_AST(element.value.toString(), null, []);\r\n            return hijo;\r\n        }else if (element instanceof Identificador){\r\n            let hijo = new Nodo_AST(element.identifier, null, []);\r\n            return hijo;\r\n        }else if (element instanceof Incremento){\r\n            if(element.TipoFuncion){\r\n                if(element.TipoPocicion) {\r\n                    exp.children.push(new Nodo_AST(\"++\",exp,[]));\r\n                    exp.children.push(new Nodo_AST(element.id,exp,[]));\r\n                }else {\r\n                    exp.children.push(new Nodo_AST(element.id,exp,[]));\r\n                    exp.children.push(new Nodo_AST(\"++\",exp,[]));\r\n                }\r\n            }else {\r\n                if(element.TipoPocicion) {\r\n                    exp.children.push(new Nodo_AST(\"--\",exp,[]));\r\n                    exp.children.push(new Nodo_AST(element.id,exp,[]));\r\n                }else {\r\n                    exp.children.push(new Nodo_AST(element.id,exp,[]));\r\n                    exp.children.push(new Nodo_AST(\"--\",exp,[]));\r\n\r\n                }\r\n            }\r\n        }else if (element instanceof FuncionEjecutar){\r\n            let padre = new Nodo_AST(\"\",null,[]);\r\n            let hijo: Nodo_AST;\r\n            padre.name=\"Funcion Ejetutar\";\r\n            hijo=new Nodo_AST(element.id,padre,[]);\r\n\r\n            if(element.ListaExpreciones!=null){\r\n                let hijo2=new Nodo_AST(\"Expresion\",padre,[]);\r\n                element.ListaExpreciones.forEach(element1 => {\r\n                    let aux=this.ast(element1);\r\n                    hijo2.children.push(aux);\r\n                });\r\n                padre.children.push(hijo2);\r\n                return padre;\r\n            }\r\n        }else if (element instanceof ListaIdentificado){\r\n            let padre=new Nodo_AST(\"Lista ID\",exp,[]);\r\n            element.linstaID.forEach(element1 => {\r\n                if(element1.Listaexprecion==null){\r\n                    let aux=new Nodo_AST(\"ID\",padre,[]);\r\n                    aux.children.push(new Nodo_AST(element1.identificador,aux,[]));\r\n                    padre.children.push(aux);\r\n                }else {\r\n                    // aca estara el array\r\n                }\r\n            });\r\n            exp.children.push(padre);\r\n\r\n        }else if (element instanceof Ternario){\r\n            let padre=new Nodo_AST(\"Ternario\",exp,[]);\r\n            padre.children.push(this.ast(element.condicion));\r\n            padre.children.push(new Nodo_AST(\"?\",padre,[]));\r\n            padre.children.push(this.ast(element.operadorVerdadero));\r\n            padre.children.push(new Nodo_AST(\":\",padre,[]));\r\n            padre.children.push(this.ast(element.operadorFalso));\r\n            exp.children.push(padre);\r\n        }\r\n    }\r\n*/\r\n\r\n    graficarEntornos(){\r\n        PdfMakeWrapper.setFonts(pdfFonts);\r\n        const pdf = new PdfMakeWrapper();\r\n        let titulo=\"Tabla De Simbolos\";\r\n        \r\n        let tituloPDF=new Txt(titulo).alignment(\"center\").end;\r\n        pdf.add(tituloPDF);\r\n        pdf.add(\"\\n\");\r\n        \r\n        if(this.tabla instanceof Tabla){\r\n            let tablas:Tabla = this.tabla;\r\n            let booleano = true;\r\n\r\n            while(tablas != null){\r\n                if(booleano) {\r\n                    let tabla1=new Table([[\"Entorno Actual\"]]).widths([ 507]).alignment(\"center\").end;\r\n                    pdf.add(tabla1);\r\n                    booleano = false;\r\n                }else  if(!booleano) {\r\n                    let tabla1=new Table([[\"Entorno Anterior\"]]).widths([ 507]).alignment(\"center\").end;\r\n                    pdf.add(tabla1);\r\n                }\r\n                \r\n                if(tablas.anterior==null){\r\n                    let tabla1=new Table([[\"Entorno Global\"]]).widths([ 507]).alignment(\"center\").end;\r\n                    pdf.add(tabla1);\r\n                }\r\n\r\n                let tabla=new Table([ [ \"Tipo de declaracion\",\"Tipo\",\"Identificador\", \"Valor\"]]).widths([ 110, 130 ,250]).alignment(\"center\").end;\r\n                pdf.add(tabla);\r\n        \r\n                tablas.variables.forEach(element => {\r\n                    if(element.valor instanceof Funcion){\r\n                        let t = element.valor;\r\n                        let tabla=new Table([[ \"  \", t.tipo.toString(), t.identificador, \"   \"]]).widths([ 110, 130 ,250]).alignment(\"center\").end;\r\n                        pdf.add(tabla);\r\n                    }else{\r\n                        let tabla=new Table([[element.getconstante(), element.tipo.toString(), element.id, element.valor]]).widths([ 110, 130 ,250]).alignment(\"center\").end;\r\n                        pdf.add(tabla);\r\n                    }\r\n                });\r\n\r\n                //let tabla2=new Table([ [ val1,\"Funcion -> \"+dato,element.identifier]]).widths([ 110, 130 ,250]).alignment('center').end;    pdf.add(tabla2);\r\n\r\n                pdf.add(\"\\n\");\r\n                pdf.add(\"\\n\");\r\n        \r\n                tablas=tablas.anterior;\r\n            }\r\n        \r\n        }\r\n        const pdfDocGenerator = pdfMake.createPdf(pdf);\r\n        var win = window.open('', '_blank');\r\n        (pdfDocGenerator as any).open({}, win);\r\n\r\n        //var win = window.open('', '_blank');\r\n        //pdf.create().open(win);\r\n        //pdfMake.createPdf(pdf).open(win);\r\n        \r\n    }\r\n\r\n    otro(){\r\n        var tb = document.getElementById('tablaambitos');\r\n\r\n/*      let tr = \"<tr>\";\r\n        tr += \"<td>\" + error.tipo + \"</td>\";\r\n        tr += \"<td>\" + error.descripcion + \"</td>\";\r\n        tr += \"<td>\" + error.fila + \"</td>\";\r\n        tr += \"<td>\" + error.columna + \"</td>\";\r\n        tr += \"</tr>\";\r\n        document.getElementById(\"infoTabla\").innerHTML += tr ;*/\r\n\r\n        if(this.tabla instanceof Tabla){\r\n            let tablas:Tabla = this.tabla;\r\n            let booleano = true;\r\n\r\n            let tr = \"<h1><th scope=\\\"col\\\">TABLA DE SIMBOLOS</th></h1>\";\r\n            //tb.innerHTML += tr ;\r\n\r\n            while(tablas != null){\r\n                if(booleano) {\r\n                    tr += \"<thead><tr><th scope=\\\"col\\\">TABLA DE ACTUAL</th></tr></thead>\";\r\n                    booleano = false;\r\n                }else  if(!booleano) {\r\n                    tr += \"<thead><tr><th scope=\\\"col\\\">TABLA DE ANTERIOR</th></tr></thead>\";\r\n                }\r\n                if(tablas.anterior==null){\r\n                    tr += \"<thead><tr><th scope=\\\"col\\\">TABLA DE ACTUAL</th></tr></thead>\";\r\n                }\r\n\r\n                tr += \"<tr>\";\r\n                tr += \"<th scope=\\\"col\\\">Tipo de declaracion</th>\";\r\n                tr += \"<th scope=\\\"col\\\">Tipo</th>\";\r\n                tr += \"<th scope=\\\"col\\\">Identificador</th>\";\r\n                tr += \"<th scope=\\\"col\\\">Valor</th>\";\r\n                tr += \"</tr>\";\r\n\r\n                tr += \"<tbody>\";\r\n        \r\n                tablas.variables.forEach(element => {\r\n                    if(element.valor instanceof Funcion){\r\n                        let t = element.valor;\r\n                        tr += \"<tr>\";\r\n                        tr += \"<td>Funcion</td>\";\r\n                        tr += \"<td>\" + t.tipo.toString() +\"</td>\";\r\n                        tr += \"<td>\" + t.identificador +\"</td>\";\r\n                        tr += \"<td> </td>\";\r\n                        tr += \"</tr>\";\r\n                    }else{\r\n                        tr += \"<tr>\";\r\n                        tr += \"<td>\" + element.getconstante() +\"</td>\";\r\n                        tr += \"<td>\" + element.tipo.toString() +\"</td>\";\r\n                        tr += \"<td>\" + element.id +\"</td>\";\r\n                        tr += \"<td>\" + element.valor + \"</td>\";\r\n                        tr += \"</tr>\";\r\n                    }\r\n                });\r\n\r\n                tr += \"<tr></tr>\";\r\n                tr += \"</tbody>\";\r\n\r\n                //let tabla2=new Table([ [ val1,\"Funcion -> \"+dato,element.identifier]]).widths([ 110, 130 ,250]).alignment('center').end;    pdf.add(tabla2);\r\n        \r\n                tablas=tablas.anterior;\r\n            }\r\n            tb.innerHTML += tr ;\r\n        }\r\n        \r\n    }\r\n\r\n    otro2(){\r\n        var tb = document.getElementById('tablaambitos');\r\n\r\n/*      let tr = \"<tr>\";\r\n        tr += \"<td>\" + error.tipo + \"</td>\";\r\n        tr += \"<td>\" + error.descripcion + \"</td>\";\r\n        tr += \"<td>\" + error.fila + \"</td>\";\r\n        tr += \"<td>\" + error.columna + \"</td>\";\r\n        tr += \"</tr>\";\r\n        document.getElementById(\"infoTabla\").innerHTML += tr ;*/\r\n        //tb.innerHTML = \"\";\r\n\r\n        if(this.tabla instanceof Tabla){\r\n            let tablas:Tabla = this.tabla;\r\n            let booleano = true;\r\n            \r\n            let tr = \"<h1 class=\\\"text-center\\\"><th scope=\\\"col\\\">TABLA DE SIMBOLOS</th></h1>\";\r\n            //tb.innerHTML += tr ;\r\n\r\n            while(tablas != null){\r\n                if(booleano) {\r\n                    tr += \"<h2 class=\\\"text-center\\\"><th scope=\\\"col\\\">TABLA ACTUAL</th></h2>\";\r\n                    booleano = false;\r\n                }else  if(!booleano) {\r\n                    tr += \"<h2 class=\\\"text-center\\\"><th scope=\\\"col\\\">TABLA ANTERIOR</th></h2>\";\r\n                }\r\n                if(tablas.anterior==null){\r\n                    tr += \"<h2 class=\\\"text-center\\\"><th scope=\\\"col\\\">TABLA GLOBAL</th></h2>\";\r\n                }\r\n\r\n                tr += \"<table class=\\\"table table-bordered table-striped text-center\\\">\";\r\n\r\n                tr += \"<thead><tr>\";\r\n                tr += \"<th scope=\\\"col\\\">Tipo de declaracion</th>\";\r\n                tr += \"<th scope=\\\"col\\\">Identificador</th>\";\r\n                tr += \"<th scope=\\\"col\\\">Tipo</th>\";\r\n                tr += \"<th scope=\\\"col\\\">Valor</th>\";\r\n                tr += \"</tr></thead>\";\r\n\r\n                tr += \"<tbody>\";\r\n        \r\n                tablas.variables.forEach(element => {\r\n                    if(element.valor instanceof Funcion){\r\n                        let t = element.valor;\r\n                        tr += \"<tr>\";\r\n                        tr += \"<td>Funcion</td>\";\r\n                        tr += \"<td>\" + t.identificador +\"</td>\";\r\n                        tr += \"<td>\" + t.tipo.toString() +\"</td>\";\r\n                        tr += \"<td> </td>\";\r\n                        tr += \"</tr>\";\r\n                    }else{\r\n                        tr += \"<tr>\";\r\n                        tr += \"<td>\" + element.getconstante() +\"</td>\";\r\n                        tr += \"<td>\" + element.id +\"</td>\";\r\n                        tr += \"<td>\" + element.tipo.toString() +\"</td>\";\r\n                        tr += \"<td>\" + element.valor + \"</td>\";\r\n                        tr += \"</tr>\";\r\n                    }\r\n                });\r\n\r\n                tr += \"<tr></tr>\";\r\n                tr += \"</tbody></table>\";\r\n\r\n                //let tabla2=new Table([ [ val1,\"Funcion -> \"+dato,element.identifier]]).widths([ 110, 130 ,250]).alignment('center').end;    pdf.add(tabla2);\r\n        \r\n                tablas=tablas.anterior;\r\n            }\r\n            tb.innerHTML += tr;\r\n        }\r\n        \r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\nimport { Case } from \"./Case\";\r\nimport { Return } from \"../Expresion/Return\";\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class Switch extends NodoAST {\r\n    condicion:NodoAST;\r\n    cases:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(condicion:NodoAST, cases:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.condicion = condicion;\r\n        this.cases = cases;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const nuevoEntorno = new Tabla(tabla);\r\n        let result:NodoAST;\r\n        result = this.condicion.ejecutar(nuevoEntorno, ast);\r\n        if (result instanceof Error) {\r\n            return result;\r\n        }\r\n\r\n        if (this.condicion.tipo.tipo != Tipos.NUMBER && this.condicion.tipo.tipo != Tipos.STRING) {\r\n            const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        for(let i = 0; i < this.cases.length; i++){\r\n            let m = this.cases[i];\r\n            if(m instanceof Case && m.esDefault != true){\r\n                let resultC:NodoAST;\r\n                resultC = m.condicion.ejecutar(nuevoEntorno, ast);\r\n                if (resultC instanceof Error) {\r\n                    return resultC;\r\n                }\r\n\r\n                if (this.condicion.tipo.tipo != m.condicion.tipo.tipo) {\r\n                    const error = new Error(\"Semantico\", \"Los tipos no coinciden sentencia Switch\", this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n\r\n                if(resultC == result){\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    \r\n                    if(res instanceof Break){\r\n                        return null;\r\n                    }\r\n                    if(res instanceof Continue || res instanceof Error || res instanceof Return){\r\n                        return res;\r\n                    }\r\n                    \r\n                    if(m instanceof Return){\r\n                        return m;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < this.cases.length; i++){\r\n            let m = this.cases[i];\r\n            if(m instanceof Case && m.esDefault == true){\r\n                const res = m.ejecutar(nuevoEntorno, ast);\r\n                if(res instanceof Continue || res instanceof Break || res instanceof Error || res instanceof Return){\r\n                    return res;\r\n                }\r\n                if(m instanceof Return){\r\n                    return m;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n        \r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\nimport { Declaracion } from './Declaracion';\r\nimport { Asignacion } from './Asignacion';\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class For extends NodoAST {\r\n    comienzo:NodoAST;\r\n    condicion:NodoAST;\r\n    iterador:NodoAST;\r\n    sentencias:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(comienzo:NodoAST, condicion:NodoAST, iterador:NodoAST, sentencias:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.comienzo = comienzo;\r\n        this.condicion = condicion;\r\n        this.iterador = iterador;\r\n        this.sentencias = sentencias;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const entorno = new Tabla(tabla);\r\n        if(this.comienzo instanceof Declaracion || this.comienzo instanceof Asignacion){\r\n            this.comienzo.ejecutar(entorno, ast);\r\n        }else{\r\n            const error = new Error(\"Semantico\", \"Se esperaba una asignacion o declaracion en la sentencia For\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        let enciclado = 0;\r\n        for (let index = 0; index <= 10000; index++){\r\n            const nuevoEntorno = new Tabla(entorno);\r\n\r\n            let result:NodoAST;\r\n            result = this.condicion.ejecutar(entorno, ast);\r\n            if (result instanceof Error) {\r\n                return result;\r\n            }\r\n\r\n            if (this.condicion.tipo.tipo != Tipos.BOOLEAN) {\r\n                const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n\r\n            if (result) {\r\n                for(let i = 0; i < this.sentencias.length; i++){\r\n                    let m = this.sentencias[i];\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    if(res instanceof Continue || res instanceof Break || res instanceof Error){\r\n                        index = 10000;\r\n                        return res;\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n                break;\r\n            }\r\n\r\n            this.iterador.ejecutar(entorno, ast);\r\n            enciclado = index;\r\n        }\r\n\r\n        if(enciclado == 10000){\r\n            const error = new Error(\"Semantico\", \"Se ha enciclado la sentencia for\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\nimport { Simbolo } from '../AST/Simbolo';\r\nimport { Identificador } from '../Expresion/Identificador';\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n*/\r\n\r\nexport class Funcion extends NodoAST {\r\n    identificador:string;\r\n    parametros:NodoAST[];\r\n    tipo:Tipo;\r\n    sentencias:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(identificador:string, parametros:NodoAST[], tipo:Tipo, sentencias:NodoAST[], fila:number, columna:number){\r\n        super(tipo, fila, columna);\r\n        this.identificador = identificador;\r\n        this.parametros = parametros;\r\n        this.sentencias = sentencias;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        let nombre = \"function_\"+this.identificador;\r\n/*\r\n        this.parametros.map((m:Identificador) =>{\r\n            nombre += \"_\" + m.tipo.tipo;\r\n        });\r\n*/\r\n        for(let i = 0; i < this.parametros.length; i++){\r\n            let m = this.parametros[i];\r\n            nombre += '_' + m.tipo.tipo;\r\n        }\r\n\r\n        let simbolo:Simbolo;\r\n        simbolo = new Simbolo(this.tipo, nombre, this, false);\r\n        const res = tabla.setVariable(simbolo);\r\n        if (res != null){\r\n            const error = new Error(\"Semantico\", res, this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import {NodoAST} from \"../AST/NodoAST\";\r\nimport {Tabla} from \"../AST/Tabla\";\r\nimport {AST} from \"../AST/AST\";\r\nimport {Simbolo} from \"../AST/Simbolo\";\r\nimport {Error} from \"../AST/Error\";\r\nimport {Tipo,Tipos} from \"../AST/Tipo\";\r\n\r\n/**\r\n * @class Nodo expresion identificador que obtendra el valor de una variable\r\n */\r\nexport class Identificador extends NodoAST {\r\n    identificador:string;\r\n    valor:NodoAST\r\n\r\n    /**\r\n     * @constructor Retorna el objeto identificador creado\r\n     * @param identifier nombre de la variable\r\n     * @param line Linea del identificador\r\n     * @param column Columna del identificador\r\n     */\r\n\r\n    constructor(identificador:string, tipo:Tipo, valor:NodoAST, fila:number, columna:number){\r\n        //tipo null porque aun no se el tipo\r\n        super(tipo, fila, columna);\r\n        this.identificador = identificador;\r\n        this.valor = valor;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        let variable:Simbolo;\r\n        variable = tabla.getVariable(this.identificador);\r\n        if (variable == null) {\r\n            const error = new Error(\"Semantico\",\"No se ha encontrado la variable \" + this.identificador, this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }else if (variable.valor == null) {\r\n            const error = new Error(\"Semantico\",\"Variable no inicializada \" + this.identificador, this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n        this.tipo = variable.tipo;\r\n        return variable.valor;\r\n   }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NodoAST } from \"../AST/NodoAST\";\r\nimport  {Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * Permite imprimir expresiones en la consola\r\n */\r\n\r\nexport class ConsoleLog extends NodoAST{\r\n    expresion:NodoAST;\r\n\r\n    /**\r\n     * @constructor Retorna el objeto Print\r\n     * @param expression Expresion que se va a mostrar en consola\r\n     * @param line Fila de donde se creo la sentencia\r\n     * @param column Columna donde se creo la sentencia\r\n     */\r\n\r\n    constructor(expresion:NodoAST, fila:number, columna:number){\r\n        super(new Tipo(Tipos.VOID), fila, columna);\r\n        this.expresion = expresion;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const value = this.expresion.ejecutar(tabla, ast);\r\n        \r\n        if(!(value instanceof Error) && value != null){    \r\n            ast.consola.push(value);\r\n        }\r\n        return null;\r\n    }\r\n}","export enum Tipos{\r\n    NUMBER,\r\n    STRING,\r\n    BOOLEAN,\r\n    VOID,\r\n    TYPE,\r\n    ARRAY\r\n}\r\n\r\n/**\r\n * \r\n * @class Permite llevar el control de los tipos del lenguaje\r\n */\r\n\r\nexport class Tipo{\r\n    tipo : Tipos;\r\n\r\n    /**\r\n     * \r\n     * @constructor Crea un nuevo tipo con el tipo primitivo indicado en el enum\r\n     * @param type Tipo seleccionado para la variable o funcion\r\n     * \r\n     */\r\n\r\n    constructor(tipo: Tipos){\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    toString(){\r\n        if(this.tipo === Tipos.BOOLEAN){\r\n            return \"boolean\";\r\n        }else if(this.tipo === Tipos.NUMBER){\r\n            return \"number\";\r\n        }else if(this.tipo === Tipos.STRING){\r\n            return \"string\";\r\n        }else if(this.tipo === Tipos.VOID){\r\n            return \"void\";\r\n        }else if(this.tipo === Tipos.TYPE){\r\n            return \"type\";\r\n        }else if(this.tipo === Tipos.ARRAY){\r\n            return \"Array\";\r\n        }\r\n    }\r\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar gramatica = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,40],$V1=[1,39],$V2=[1,37],$V3=[1,38],$V4=[1,22],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,23],$V9=[1,24],$Va=[1,36],$Vb=[1,26],$Vc=[1,49],$Vd=[1,27],$Ve=[1,28],$Vf=[1,30],$Vg=[1,29],$Vh=[1,35],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[2,5,7,26,27,28,29,31,32,33,35,37,40,48,52,56,57,58,61,62,64,65,74,86,89,90,91,92,93],$Vq=[63,74,75,76,77,78,79,80,81,82,83,84,85,87,88],$Vr=[2,98],$Vs=[2,99],$Vt=[1,58],$Vu=[1,61],$Vv=[1,67],$Vw=[1,72],$Vx=[1,77],$Vy=[1,79],$Vz=[1,78],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,89],$VK=[1,90],$VL=[1,91],$VM=[2,105],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,93],$VR=[8,38,53],$VS=[8,38,41,53,54,63,74,75,76,77,78,79,80,81,82,83,84,85,87,88],$VT=[1,104],$VU=[8,38],$VV=[1,108],$VW=[1,143],$VX=[1,144],$VY=[1,145],$VZ=[1,146],$V_=[2,5,7,26,27,28,29,31,32,33,35,37,40,48,51,52,56,57,58,61,62,64,65,74,86,89,90,91,92,93],$V$=[1,158],$V01=[1,159],$V11=[8,38,41,53,54,63,74,75,80,81,82,83,84,85,87,88],$V21=[8,38,41,53,54,63,74,75,76,77,80,81,82,83,84,85,87,88],$V31=[8,38,41,53,54,63,80,81,82,83,84,85,87,88],$V41=[8,38,41,53,54,63,84,85,87,88],$V51=[1,166],$V61=[38,53],$V71=[8,38,43,53,54],$V81=[1,173],$V91=[7,61,62],$Va1=[41,54];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"S\":3,\"INSTRUCCIONES\":4,\"EOF\":5,\"ERROR\":6,\"}\":7,\";\":8,\"INSTRUCCION\":9,\"CONSOLE\":10,\"DECLARACION\":11,\"ASIGNACION\":12,\"IF\":13,\"WHILE\":14,\"DOWHILE\":15,\"FOR\":16,\"SWITCH\":17,\"BREAK\":18,\"CONTINUE\":19,\"RETURN\":20,\"TERNARIO\":21,\"FUNCION\":22,\"USOFUNCION\":23,\"COMENTARIO\":24,\"GRAFICAR\":25,\"TK_GRAFICAR\":26,\"TK_CL\":27,\"TK_CM\":28,\"TK_CONSOLE\":29,\"CONDICION\":30,\"TK_BREAK\":31,\"TK_CONTINUE\":32,\"TK_RETURN\":33,\"EXPRESION\":34,\"TK_CONST\":35,\"LISTA_DECLARACION\":36,\"TK_LET\":37,\",\":38,\"ID_DECLARACION\":39,\"TK_ID\":40,\":\":41,\"TIPO\":42,\"=\":43,\"LISTA_ASIGNACION\":44,\"ID_ASIGNACION\":45,\"++\":46,\"--\":47,\"TK_IF\":48,\"BLOQUE_INSTRUCCIONES\":49,\"LISTA_IF\":50,\"TK_ELSE\":51,\"(\":52,\")\":53,\"{\":54,\"ELSE_IF\":55,\"TK_WHILE\":56,\"TK_DO\":57,\"TK_SWITCH\":58,\"LISTA_CASE\":59,\"CASE\":60,\"TK_CASE\":61,\"TK_DEFAULT\":62,\"?\":63,\"TK_FOR\":64,\"TK_FUNCTION\":65,\"PFUNCION\":66,\"LISTA_PARAMETROS\":67,\"PARAMETRO\":68,\"LISTA_IDS\":69,\"TK_STRING\":70,\"TK_BOOLEAN\":71,\"TK_NUMBER\":72,\"TK_VOID\":73,\"-\":74,\"+\":75,\"*\":76,\"/\":77,\"^\":78,\"%\":79,\"<\":80,\">\":81,\">=\":82,\"<=\":83,\"==\":84,\"!=\":85,\"!\":86,\"||\":87,\"&&\":88,\"TK_NUMERO\":89,\"TK_TRUE\":90,\"TK_FALSE\":91,\"TK_CADENAC\":92,\"TK_CADENAS\":93,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"}\",8:\";\",26:\"TK_GRAFICAR\",27:\"TK_CL\",28:\"TK_CM\",29:\"TK_CONSOLE\",31:\"TK_BREAK\",32:\"TK_CONTINUE\",33:\"TK_RETURN\",35:\"TK_CONST\",37:\"TK_LET\",38:\",\",40:\"TK_ID\",41:\":\",43:\"=\",46:\"++\",47:\"--\",48:\"TK_IF\",51:\"TK_ELSE\",52:\"(\",53:\")\",54:\"{\",56:\"TK_WHILE\",57:\"TK_DO\",58:\"TK_SWITCH\",61:\"TK_CASE\",62:\"TK_DEFAULT\",63:\"?\",64:\"TK_FOR\",65:\"TK_FUNCTION\",70:\"TK_STRING\",71:\"TK_BOOLEAN\",72:\"TK_NUMBER\",73:\"TK_VOID\",74:\"-\",75:\"+\",76:\"*\",77:\"/\",78:\"^\",79:\"%\",80:\"<\",81:\">\",82:\">=\",83:\"<=\",84:\"==\",85:\"!=\",86:\"!\",87:\"||\",88:\"&&\",89:\"TK_NUMERO\",90:\"TK_TRUE\",91:\"TK_FALSE\",92:\"TK_CADENAC\",93:\"TK_CADENAS\"},\nproductions_: [0,[3,2],[3,1],[6,2],[6,2],[4,2],[4,1],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,2],[9,1],[9,2],[9,1],[25,1],[24,1],[24,1],[10,3],[18,2],[19,2],[20,3],[20,2],[11,2],[11,2],[36,3],[36,1],[39,5],[39,3],[39,3],[39,1],[12,1],[44,3],[44,1],[45,3],[45,2],[45,2],[13,6],[13,4],[13,5],[13,3],[30,3],[49,3],[49,2],[50,2],[50,1],[55,4],[14,3],[15,5],[17,5],[17,4],[59,2],[59,1],[60,4],[60,3],[21,5],[16,9],[16,9],[22,6],[22,4],[66,3],[66,2],[67,3],[67,1],[68,3],[23,4],[23,3],[69,3],[69,1],[42,1],[42,1],[42,1],[42,1],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nthis.$ = new AST($$[$0-1], errores); errores = []; return this.$;\nbreak;\ncase 2:\nthis.$ = new AST([], errores); errores = []; return this.$;\nbreak;\ncase 3: case 4:\nerrores.push(new Error(\"Sintactico\", \"Recuperado en: \" + $$[$0-1].yyreport_syntax_error + $$[$0-1], _$[$0].first_line, _$[$0].first_column));\nbreak;\ncase 5:\n this.$ = $$[$0-1];\r\n                                            if($$[$0] instanceof NodoAST){\r\n                                                this.$ = $$[$0-1]; this.$.push($$[$0]);\r\n                                            }\r\n                                          \nbreak;\ncase 6:\n if($$[$0] instanceof NodoAST){\r\n                                                this.$ = [$$[$0]];\r\n                                            }else{\r\n                                                this.$ = [];\r\n                                            }\r\n                                          \nbreak;\ncase 7: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 19: case 23: case 98: case 99:\nthis.$ = $$[$0];\nbreak;\ncase 8: case 9: case 18: case 20: case 50: case 51: case 69: case 106:\nthis.$ = $$[$0-1];\nbreak;\ncase 22:\nthis.$ =$$[$0-1];\nbreak;\ncase 24:\nthis.$ = new graficar_ts(_$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 27:\nthis.$ = new ConsoleLog($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 28:\nthis.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 29:\nthis.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 30:\nthis.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 31:\nthis.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 32:\nthis.$ = new Declaracion(true, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 33:\nthis.$ = new Declaracion(false, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 34: case 71: case 76:\nthis.$ = $$[$0-2]; this.$.push($$[$0]);\nbreak;\ncase 35: case 42: case 54: case 61: case 72: case 77:\nthis.$ = [$$[$0]];\nbreak;\ncase 36:\nthis.$ = new Identificador($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 37: case 73:\nthis.$ = new Identificador($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 38: case 43:\nthis.$ = new Identificador($$[$0-2], null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 39: case 105:\nthis.$ = new Identificador($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 40:\nthis.$ = new Asignacion($$[$0], _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 41:\nthis.$ = $$[$0-2]; this.$.push($$[$0-1]);\nbreak;\ncase 44:\nthis.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '+', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 45:\nthis.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '-', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 46:\nthis.$ = new If($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);\nbreak;\ncase 47:\nthis.$ = new If($$[$0-2], $$[$0-1], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 48:\nthis.$ = new If($$[$0-3], $$[$0-2], [], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 49:\nthis.$ = new If($$[$0-1], $$[$0], [], [], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 52: case 70:\nthis.$ = [];\nbreak;\ncase 53:\nthis.$ =$$[$0-1]; this.$.push($$[$0]);\nbreak;\ncase 55:\nthis.$ = new If($$[$0-1], $$[$0], [], [], _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 56:\nthis.$ = new While($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 57:\nthis.$ = new DoWhile($$[$0-1], $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 58:\nthis.$ = new Switch($$[$0-3], $$[$0-1], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 59:\nthis.$ = new Switch($$[$0-2], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 60:\nthis.$ = $$[$0-1]; this.$.push($$[$0])\nbreak;\ncase 62:\nthis.$ = new Case(false, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 63:\nthis.$ = new Case(true, null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 64:\nthis.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);\nbreak;\ncase 65: case 66:\nthis.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);\nbreak;\ncase 67:\nthis.$ = new Funcion($$[$0-4], $$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);\nbreak;\ncase 68:\nthis.$ = new Funcion($$[$0-2], $$[$0-1], new Tipo(Tipos.VOID), $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 74:\nthis.$ = new UsoFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);\nbreak;\ncase 75:\nthis.$ = new UsoFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 78:\nthis.$ = new Tipo(Tipos.STRING);\nbreak;\ncase 79:\nthis.$ = new Tipo(Tipos.BOOLEAN);\nbreak;\ncase 80:\nthis.$ = new Tipo(Tipos.NUMBER);\nbreak;\ncase 81:\nthis.$ = new Tipo(Tipos.VOID);\nbreak;\ncase 82:\nthis.$ = new Aritmetica($$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 83:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 84:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 85:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 86:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 87:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 88:\nthis.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 89:\nthis.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 90:\nthis.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 91:\nthis.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 92:\nthis.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 93:\nthis.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 94:\nthis.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 95:\nthis.$ = new Logica($$[$0], null, '!', _$[$0-1].first_line, _$[$0-1].first_column);\nbreak;\ncase 96:\nthis.$ = new Logica($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 97:\nthis.$ = new Logica($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);\nbreak;\ncase 100:\nthis.$ = new Primitivo(new Tipo(Tipos.NUMBER), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 101:\nthis.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), true, _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 102:\nthis.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), false, _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 103:\nthis.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\\\\"/g,\"\\\"\"), _$[$0].first_line, _$[$0].first_column);\nbreak;\ncase 104:\nthis.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\\\'/g,\"'\"), _$[$0].first_line, _$[$0].first_column);\nbreak;\n}\n},\ntable: [{2:$V0,3:1,4:2,5:[1,3],6:21,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{1:[3]},{2:$V0,5:[1,50],6:21,9:51,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{1:[2,2]},o($Vp,[2,6]),o($Vp,[2,7]),{8:[1,52]},{8:[1,53]},o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vq,$Vr,{8:[1,54]}),o($Vp,[2,19]),o($Vq,$Vs,{8:[1,55]}),o($Vp,[2,21]),{8:[1,56]},o($Vp,[2,23]),{30:57,52:$Vt},{36:59,39:60,40:$Vu},{36:62,39:60,40:$Vu},o([8,53],[2,40],{38:[1,63]}),{30:64,52:$Vt},{30:65,52:$Vt},{49:66,54:$Vv},{52:[1,68]},{21:70,23:71,34:69,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{8:[1,73]},{8:[1,74]},{8:[1,76],21:70,23:71,34:75,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{40:[1,92]},o($Vq,$VM,{43:$VN,46:$VO,47:$VP,52:$VQ}),o($Vp,[2,25]),o($Vp,[2,26]),{8:[2,24]},{7:[1,97],8:[1,98]},o($VR,[2,42]),{21:70,23:71,34:99,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:100,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),{21:70,23:71,34:101,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{1:[2,1]},o($Vp,[2,5]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,18]),o($Vp,[2,20]),o($Vp,[2,22]),{8:[1,102]},{21:70,23:71,34:103,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{8:[2,32],38:$VT},o($VU,[2,35]),o($VU,[2,39],{41:[1,105],43:[1,106]}),{8:[2,33],38:$VT},{40:$VV,45:107},{49:109,54:$Vv},{49:110,54:$Vv},{56:[1,111]},{2:$V0,4:112,6:21,7:[1,113],9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{11:114,12:115,35:$V8,37:$V9,40:$VV,44:25,45:41},{54:[1,116],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($VS,$Vr),o($VS,$Vs),o($VS,$VM,{52:$VQ}),o($Vp,[2,28]),o($Vp,[2,29]),{8:[1,117],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($Vp,[2,31]),{21:70,23:71,34:118,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:119,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:120,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:121,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:122,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:123,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:124,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:125,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:126,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:127,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:128,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:129,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:130,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:131,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:132,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{52:[1,134],66:133},{21:70,23:71,34:137,40:$Vw,52:$Vc,53:[1,136],69:135,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:138,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($VR,[2,44]),o($VR,[2,45]),o($Vp,[2,3]),o($Vp,[2,4]),o($VS,[2,82]),o($VS,[2,95]),{53:[1,139],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($Vp,[2,27]),{53:[1,140],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{39:141,40:$Vu},{42:142,70:$VW,71:$VX,72:$VY,73:$VZ},{21:70,23:71,34:147,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($VR,[2,41]),{43:$VN,46:$VO,47:$VP},o($Vp,[2,49],{50:148,55:150,51:[1,149]}),o($Vp,[2,56]),{30:151,52:$Vt},{2:$V0,6:21,7:[1,152],9:51,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($V_,[2,52]),{8:[1,153]},{8:[1,154]},{7:[1,156],59:155,60:157,61:$V$,62:$V01},o($Vp,[2,30]),{41:[1,160],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($V11,[2,83],{76:$VA,77:$VB,78:$VC,79:$VD}),o($V11,[2,84],{76:$VA,77:$VB,78:$VC,79:$VD}),o($V21,[2,85],{78:$VC,79:$VD}),o($V21,[2,86],{78:$VC,79:$VD}),o($VS,[2,87]),o($VS,[2,88]),o($V31,[2,89],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V31,[2,90],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V31,[2,91],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V31,[2,92],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V41,[2,93],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o($V41,[2,94],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o([8,38,41,53,54,63,87],[2,96],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,88:$VL}),o([8,38,41,53,54,63,87,88],[2,97],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ}),{41:[1,161],49:162,54:$Vv},{40:$V51,53:[1,164],67:163,68:165},{38:[1,168],53:[1,167]},o($VS,[2,75]),o($V61,[2,77],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($VR,[2,43],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($VS,[2,106]),o([8,54],[2,50]),o($VU,[2,34]),o($VU,[2,37],{43:[1,169]}),o($V71,[2,78]),o($V71,[2,79]),o($V71,[2,80]),o($V71,[2,81]),o($VU,[2,38],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($Vp,[2,47],{55:171,51:[1,170]}),{48:$V81,49:172,54:$Vv},o($V_,[2,54]),{8:[1,174]},o($V_,[2,51]),{21:70,23:71,34:175,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:176,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{7:[1,177],60:178,61:$V$,62:$V01},o($Vp,[2,59]),o($V91,[2,61]),{21:70,23:71,34:179,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{41:[1,180]},{21:70,23:71,34:181,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{42:182,70:$VW,71:$VX,72:$VY,73:$VZ},o($Vp,[2,68]),{38:[1,184],53:[1,183]},o($Va1,[2,70]),o($V61,[2,72]),{41:[1,185]},o($VS,[2,74]),{21:70,23:71,34:186,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:187,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{48:$V81,49:188,54:$Vv},o($V_,[2,53]),o($Vp,[2,48]),{30:189,52:$Vt},o($Vp,[2,57]),{8:[1,190],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{8:[1,191],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($Vp,[2,58]),o($V91,[2,60]),{41:[1,192],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{2:$V0,4:193,6:21,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o([8,38,41,53,54,63],[2,64],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),{49:194,54:$Vv},o($Va1,[2,69]),{40:$V51,68:195},{42:196,70:$VW,71:$VX,72:$VY,73:$VZ},o($V61,[2,76],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($VU,[2,36],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($Vp,[2,46]),{49:197,54:$Vv},{12:198,40:$VV,44:25,45:41},{12:199,40:$VV,44:25,45:41},{2:$V0,4:200,6:21,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($V91,[2,63],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,6:21,44:25,34:34,45:41,9:51,2:$V0,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,35:$V8,37:$V9,40:$Va,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo}),o($Vp,[2,67]),o($V61,[2,71]),o($V61,[2,73]),o($V_,[2,55]),{53:[1,201]},{53:[1,202]},o($V91,[2,62],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,6:21,44:25,34:34,45:41,9:51,2:$V0,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,35:$V8,37:$V9,40:$Va,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo}),{49:203,54:$Vv},{49:204,54:$Vv},o($Vp,[2,65]),o($Vp,[2,66])],\ndefaultActions: {3:[2,2],39:[2,24],50:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\r\n    //Carpeta AST\r\n    var {AST} = require(\"./AST/AST\");\r\n    var {Error} = require(\"./AST/Error\");\r\n    var {NodoAST} = require(\"./AST/NodoAST\");\r\n    var {Simbolo} = require(\"./AST/Simbolo\");\r\n    var {Tabla} = require(\"./AST/Tabla\");\r\n    var {Tipo,Tipos} = require(\"./AST/Tipo\");\r\n    \r\n\r\n    //Carpeta Expresion\r\n    var {Aritmetica} = require(\"./Expresion/Aritmetica\");\r\n    var {Primitivo} = require(\"./Expresion/Primitivo\");\r\n    var {Identificador} = require(\"./Expresion/Identificador\");\r\n    var {Relacional} = require(\"./Expresion/Relacional\");\r\n    var {Logica} = require(\"./Expresion/Logica\");\r\n    var {Continue} = require(\"./Expresion/Continue\");\r\n    var {Break} = require(\"./Expresion/Break\");\r\n    var {Return} = require(\"./Expresion/Return\");\r\n    \r\n    \r\n    //Carpeta Instruccion\r\n    var {ConsoleLog} = require(\"./Instruccion/ConsoleLog\");\r\n    var {Declaracion} = require(\"./Instruccion/Declaracion\");\r\n    var {Asignacion} = require(\"./Instruccion/Asignacion\");\r\n    var {If} = require(\"./Instruccion/If\");\r\n    var {While} = require(\"./Instruccion/While\");\r\n    var {DoWhile} = require(\"./Instruccion/DoWhile\");\r\n    var {For} = require(\"./Instruccion/For\");\r\n    var {Switch} = require(\"./Instruccion/Switch\");\r\n    var {Case} = require(\"./Instruccion/Case\");\r\n    var {Ternario} = require(\"./Instruccion/Ternario\");\r\n    var {Funcion} = require(\"./Instruccion/Funcion\");\r\n    var {UsoFuncion} = require(\"./Instruccion/UsoFuncion\");\r\n    var {graficar_ts} = require(\"./Instruccion/graficar_ts\");\r\n\r\n\r\n    var errores = [];\r\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 27;\nbreak;\ncase 1:return 28;\nbreak;\ncase 2:return 70;\nbreak;\ncase 3:return 72;\nbreak;\ncase 4:return 71;\nbreak;\ncase 5:return 73;\nbreak;\ncase 6:return 'TK_ARRAY';\nbreak;\ncase 7:return 'TK_ARRAY';\nbreak;\ncase 8:return 46;\nbreak;\ncase 9:return 47;\nbreak;\ncase 10:return 78;\nbreak;\ncase 11:return 75;\nbreak;\ncase 12:return 74;\nbreak;\ncase 13:return 76;\nbreak;\ncase 14:return 77;\nbreak;\ncase 15:return 79;\nbreak;\ncase 16:return 84;\nbreak;\ncase 17:return 85;\nbreak;\ncase 18:return 82;\nbreak;\ncase 19:return 81;\nbreak;\ncase 20:return 83;\nbreak;\ncase 21:return 80;\nbreak;\ncase 22:return 88;\nbreak;\ncase 23:return 87;\nbreak;\ncase 24:return 86;\nbreak;\ncase 25:return 52;\nbreak;\ncase 26:return 53;\nbreak;\ncase 27:return 54;\nbreak;\ncase 28:return 7;\nbreak;\ncase 29:return 8;\nbreak;\ncase 30:return 41;\nbreak;\ncase 31:return 38;\nbreak;\ncase 32:return 43;\nbreak;\ncase 33:return '.';\nbreak;\ncase 34:return 63;\nbreak;\ncase 35:return 65;\nbreak;\ncase 36:return 48;\nbreak;\ncase 37:return 51;\nbreak;\ncase 38:return 58;\nbreak;\ncase 39:return 61;\nbreak;\ncase 40:return 57;\nbreak;\ncase 41:return 56;\nbreak;\ncase 42:return 64;\nbreak;\ncase 43:return 'TK_IN';\nbreak;\ncase 44:return 'TK_OF';\nbreak;\ncase 45:return 32;\nbreak;\ncase 46:return 33;\nbreak;\ncase 47:return 31;\nbreak;\ncase 48:return 62;\nbreak;\ncase 49:return 'TK_PUSH';\nbreak;\ncase 50:return 'TK_POP';\nbreak;\ncase 51:return 'TK_LENGTH';\nbreak;\ncase 52:return 37;\nbreak;\ncase 53:return 35;\nbreak;\ncase 54:return 29;\nbreak;\ncase 55:return 26;\nbreak;\ncase 56:return 90;\nbreak;\ncase 57:return 91;\nbreak;\ncase 58:return 92;\nbreak;\ncase 59:return 40;\nbreak;\ncase 60:return 89;\nbreak;\ncase 61:return 93;\nbreak;\ncase 62:\nbreak;\ncase 63:errores.push(new Error(\"Lexico\", yy_.yytext+\" No pertenece al lenguaje\", yy_.yylloc.first_line, yy_.yylloc.first_column));\nbreak;\ncase 64:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\/\\/[^\\n]*)/,/^(?:\\/\\*(\\*|\\/|[^\"*/\"])*\\*\\/)/,/^(?:string\\b)/,/^(?:number\\b)/,/^(?:boolean\\b)/,/^(?:void\\b)/,/^(?:Array\\b)/,/^(?:type\\b)/,/^(?:\\+\\+)/,/^(?:--)/,/^(?:\\*\\*)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\\|\\|)/,/^(?:!)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{)/,/^(?:\\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:\\.)/,/^(?:\\?)/,/^(?:function\\b)/,/^(?:if\\b)/,/^(?:else\\b)/,/^(?:switch\\b)/,/^(?:case\\b)/,/^(?:do\\b)/,/^(?:while\\b)/,/^(?:for\\b)/,/^(?:in\\b)/,/^(?:of\\b)/,/^(?:continue\\b)/,/^(?:return\\b)/,/^(?:break\\b)/,/^(?:default\\b)/,/^(?:push\\b)/,/^(?:pop\\b)/,/^(?:length\\b)/,/^(?:let\\b)/,/^(?:const\\b)/,/^(?:console\\.log\\b)/,/^(?:graficar_ts\\b)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:\"((\\\\\")?|[^\\\"])*\")/,/^(?:[A-Za-z\"_\"][A-Za-z\"_\"0-9]*)/,/^(?:[0-9]+(\\.[0-9]+)?)/,/^(?:'((\\\\')|[^\"'\"])*')/,/^(?:[ \\r\\t\\n]+)/,/^(?:.)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = gramatica;\nexports.Parser = gramatica.Parser;\nexports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\nimport { Return } from \"../Expresion/Return\";\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class If extends NodoAST {\r\n    condicion:NodoAST;\r\n    sentenciasIF:NodoAST[];\r\n    listaIFS:NodoAST[];\r\n    sentenciasELSE:NodoAST[];\r\n    entro:boolean;\r\n\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(condicion:NodoAST, sentenciasIF:NodoAST[], listaIFS:NodoAST[], sentenciasELSE:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.condicion = condicion;\r\n        this.sentenciasIF = sentenciasIF;\r\n        this.listaIFS = listaIFS;\r\n        this.sentenciasELSE = sentenciasELSE;\r\n        this.entro = false;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        this.entro = false;\r\n        const nuevoEntorno = new Tabla(tabla);\r\n        let result:NodoAST;\r\n        result = this.condicion.ejecutar(nuevoEntorno, ast);\r\n        if (result instanceof Error) {\r\n            return result;\r\n        }\r\n\r\n        if (this.condicion.tipo.tipo != Tipos.BOOLEAN) {\r\n            const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        if (result) {\r\n            for(let i = 0; i < this.sentenciasIF.length; i++){\r\n                let m = this.sentenciasIF[i];\r\n                const res = m.ejecutar(nuevoEntorno, ast);\r\n                if(res instanceof Continue || res instanceof Break || res instanceof Error || res instanceof Return){\r\n                    return res;\r\n                }\r\n                if(m instanceof Return){\r\n                    return m;\r\n                }\r\n            }\r\n            this.entro = true;\r\n            \r\n        } else {\r\n            for(let i = 0; i < this.listaIFS.length; i++){\r\n                let m = this.listaIFS[i];\r\n                if(m instanceof If){\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    if(m.entro){\r\n                        this.entro = true;\r\n                        return res;\r\n                    }\r\n                    if (res instanceof Error || res instanceof Return) {\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if(!this.entro){\r\n                for(let i = 0; i < this.sentenciasELSE.length; i++){\r\n                    let m = this.sentenciasELSE[i];\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    if(res instanceof Continue || res instanceof Break || res instanceof Error || res instanceof Return){\r\n                        return res;\r\n                    }\r\n                    if(m instanceof Return){\r\n                        return m;\r\n                    }\r\n                    this.entro = true;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\n\r\n/**\r\n * Crea un nuevo objeto Nodo expresion en base a un valor primitivo,\r\n * por ejemplo numeros, booleanos o cadenas(suponiendo que la cadena es primitivo)\r\n */\r\nexport class Primitivo extends NodoAST{\r\n    valor:object;\r\n\r\n    /**\r\n     * @constructor Devuelve un nodo que internamente sera una expresion por tener un tipo\r\n     * @param tipo Tipo del valor, puede ser numero, cadena o booleano\r\n     * @param valor Valor primitivo que crear\r\n     * @param fila Fila de donde se creo la sentencia\r\n     * @param columna columnaa donde se creo la sentencia\r\n     */\r\n    constructor(tipo:Tipo, valor:object, fila:number, columna:number){\r\n        super(tipo, fila, columna);\r\n        this.valor = valor;\r\n    }\r\n\r\n    /**\r\n     * Devuelve el valor inicial e.g. 4\r\n     * @param table Tabla de simbolos\r\n     * @param tree Arbol de instrucciones y excepciones\r\n     */\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        return this.valor;\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Return } from './Return';\r\n\r\n/**\r\n * @class Genera un nuevo nodo expresion para realizar operaciones relacionales\r\n */\r\n\r\nexport class Relacional extends NodoAST {\r\n    izquierdo:NodoAST;\r\n    derecho:NodoAST;\r\n    operador:string;\r\n\r\n    /**\r\n     * @constructor Devuelve el nodo expresion para ser utilizado con otras operaciones\r\n     * @param izquierdo Nodo expresion izquierdo\r\n     * @param derecho Nodo expresion derecho\r\n     * @param operador Operador\r\n     * @param fila filaa de la operacion\r\n     * @param columna columnaa de la operacion\r\n     */\r\n\r\n    constructor(izquierdo:NodoAST, derecho:NodoAST, operador:string, fila:number, columna:number) {\r\n        super(new Tipo(Tipos.BOOLEAN), fila, columna);\r\n        this.izquierdo = izquierdo;\r\n        this.derecho = derecho;\r\n        this.operador = operador;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        const LeftResult = this.izquierdo.ejecutar(tabla, ast);\r\n        if (LeftResult instanceof Error) {\r\n            return LeftResult;\r\n        }\r\n\r\n        const RightResult = this.derecho.ejecutar(tabla, ast);\r\n        if (RightResult instanceof Error) {\r\n            return RightResult;\r\n        }\r\n\r\n\r\n        if (this.operador == '<') {\r\n            if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                return LeftResult < RightResult;\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error de tipos en MENOR QUE se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(),this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        } else if (this.operador == '>') {\r\n            if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                return LeftResult > RightResult;\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error de tipos en MAYOR QUE se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        } else if (this.operador == '>=') {\r\n            if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                return LeftResult >= RightResult;\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error de tipos en MAYOR IGUAL se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        } else if (this.operador == '<=') {\r\n            if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                return LeftResult <= RightResult;\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error de tipos en MENOR IGUAL se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        } else if (this.operador == '!=') {\r\n            if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                return LeftResult != RightResult;\r\n            } else if (this.izquierdo.tipo.tipo == Tipos.STRING && this.derecho.tipo.tipo == Tipos.STRING) {\r\n                return LeftResult != RightResult;\r\n            }else if(this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                return LeftResult != RightResult;\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error de tipos en DIFERENTE QUE se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        } else if (this.operador == '==') {\r\n            if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER) {\r\n                return LeftResult == RightResult;\r\n            }else if(this.izquierdo.tipo.tipo == Tipos.STRING && this.derecho.tipo.tipo == Tipos.STRING) {\r\n                return LeftResult == RightResult;\r\n            }else if(this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                return LeftResult == RightResult;\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error de tipos en IGUAL IGUAL se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        }else{\r\n            const error = new Error(\"Semantico\", \"Error operador desconocido\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\n\r\n/**\r\n * @class Nodo expresion break, nos indica cuando terminar un ciclo\r\n */\r\n\r\nexport class Return extends NodoAST {\r\n    valor:NodoAST;\r\n    dato:object;\r\n\r\n    /**\r\n     * @constructor Retorna el objeto break creado\r\n     * @param line Linea del break\r\n     * @param column Columna del break\r\n     */\r\n    \r\n    constructor(valor:NodoAST, dato:object, fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n        this.valor = valor;\r\n        this.dato = null;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        if(this.valor != null){\r\n            const result = this.valor.ejecutar(tabla, ast);\r\n            if (result instanceof Error) {\r\n                return result;\r\n            }\r\n            this.dato = result;\r\n            this.tipo = this.valor.tipo;\r\n            return result;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Simbolo } from \"../AST/Simbolo\";\r\nimport { Identificador } from '../Expresion/Identificador';\r\nimport { Funcion } from './Funcion';\r\nimport { Return } from '../Expresion/Return';\r\n\r\n/**\r\n * @class Reasigna el valor de una variable existente\r\n */\r\n\r\nexport class UsoFuncion extends NodoAST {\r\n    identificador:string;\r\n    parametros:NodoAST[];\r\n    valor:NodoAST;\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia Asignacion\r\n     * @param identificador nombre de la variable\r\n     * @param valor valor de la variable\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(identificador:string, parametros:NodoAST[], fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n        this.identificador = identificador;\r\n        this.parametros = parametros;\r\n        this.valor = null;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        const nuevoEntorno = new Tabla(tabla);\r\n        let nombre = \"function_\"+this.identificador;\r\n\r\n        for(let i = 0; i < this.parametros.length; i++){\r\n            let m = this.parametros[i];\r\n            const result = m.ejecutar(tabla, ast);\r\n            if(result instanceof Error){\r\n                return result;\r\n            }\r\n            nombre += '_' + m.tipo.tipo;\r\n        }\r\n\r\n        let variable:Simbolo;\r\n        variable = tabla.getVariable(nombre);\r\n        if (variable == null) {\r\n            const error = new Error(\"Semantico\",\"No se ha encontrado la funcion \" + this.identificador, this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        let funcion:Funcion;\r\n        if(variable.valor instanceof Funcion){\r\n            funcion = variable.valor;\r\n            this.tipo = funcion.tipo;\r\n        }\r\n\r\n        for(let i = 0; i < this.parametros.length; i++){\r\n            let ejec = this.parametros[i];\r\n            let enf = funcion.parametros[i];\r\n            if(enf instanceof Identificador){\r\n                let result = ejec.ejecutar(tabla,ast);\r\n                if (result instanceof Error) {\r\n                    return result;\r\n                }\r\n                if(ejec.tipo.tipo == enf.tipo.tipo){\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(ejec.tipo, enf.identificador, result, false);\r\n                    const res = nuevoEntorno.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, this.fila, this.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < funcion.sentencias.length; i++){\r\n            let m = funcion.sentencias[i];\r\n            let result = m.ejecutar(nuevoEntorno, ast);\r\n            if (result instanceof Error) {\r\n                return result;\r\n            }else if(result instanceof Return || m instanceof Return){\r\n                if(m instanceof Return){\r\n                    result = m;\r\n                }\r\n                if(funcion.tipo.tipo == Tipos.VOID){\r\n                    if(result != null){\r\n                        const error = new Error(\"Semantico\", \"Error en return, no puede dovolver valor \", this.fila, this.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }else{\r\n                        this.tipo = funcion.tipo;\r\n                        return null;\r\n                    }\r\n                }else if(result.tipo.tipo == funcion.tipo.tipo){\r\n                    this.tipo = result.tipo;\r\n                    if(result != null){\r\n                        return result.dato;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(funcion.tipo.tipo != Tipos.VOID){\r\n            const error = new Error(\"Semantico\", \"Error, debe haber un return que devuelva un valor\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import {NodoAST} from \"../AST/NodoAST\"\r\nimport {Tabla} from \"../AST/Tabla\";\r\nimport {AST} from \"../AST/AST\";\r\nimport {Error} from \"../AST/Error\";\r\nimport {Tipo, Tipos} from \"../AST/Tipo\";\r\nimport {Simbolo} from \"../AST/Simbolo\";\r\nimport { Identificador } from '../Expresion/Identificador';\r\nimport { Return } from \"../Expresion/Return\";\r\n\r\n/**\r\n * @class Inserta una nueva variable en la tabla de simbolos\r\n */\r\nexport class Declaracion extends NodoAST {\r\n    constante:boolean;\r\n    declaraciones:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia Declaracion\r\n     * @param type Tipo de la variable\r\n     * @param identifier nombre de la variable\r\n     * @param valor valor de la variable\r\n     * @param line Linea de la sentencia if\r\n     * @param column Columna de la sentencia if\r\n     */\r\n    constructor(constante:boolean, declaraciones:NodoAST[], fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n        this.constante = constante;\r\n        this.declaraciones = declaraciones;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        let retorno = null;\r\n        this.declaraciones.map((m:Identificador) =>{\r\n            if(this.constante == true){\r\n                if(m.valor == null){\r\n                    const error = new Error(\"Semantico\", \"Constante \" + m.identificador + \" no inicializada \", m.fila, m.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    retorno = error;\r\n                    return error;\r\n\r\n                }else{\r\n                    let result = m.valor.ejecutar(tabla, ast);\r\n                    if (result instanceof Error) {\r\n                        retorno = result;\r\n                        return result;\r\n                    }\r\n\r\n                    if(result instanceof Return && result.valor != null){\r\n                        result = result.valor;\r\n                    }else{\r\n                        const error = new Error(\"Semantico\", \"Error en el return de la funcion\", this.fila, this.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }\r\n\r\n                    if(m.tipo == null){\r\n                        m.tipo = m.valor.tipo;\r\n                    }else if (m.tipo.tipo != m.valor.tipo.tipo) {\r\n                        const error = new Error(\"Semantico\", \"No se puede declarar la variable \" + m.identificador + \" los tipos no coinciden\", m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n\r\n                    if (m.tipo.tipo == Tipos.VOID) {\r\n                        const error = new Error(\"Semantico\", \"No se puede declarar la variable con tipo void\", m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(m.tipo, m.identificador, result, this.constante);\r\n                    const res = tabla.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n                    return retorno;\r\n                }\r\n\r\n            }else{\r\n                if(m.valor == null){\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(m.tipo, m.identificador, null, this.constante);\r\n                    const res = tabla.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n                    return retorno;\r\n\r\n                }else{\r\n                    const result = m.valor.ejecutar(tabla, ast);\r\n                    if (result instanceof Error) {\r\n                        retorno = result;\r\n                        return result;\r\n                    }\r\n\r\n                    if(m.tipo == null){\r\n                        m.tipo = m.valor.tipo;\r\n                    }else if (m.tipo.tipo != m.valor.tipo.tipo) {\r\n                        const error = new Error(\"Semantico\", \"No se puede declarar la variable \" + m.identificador + \" porque los tipos no coinciden.\", m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n\r\n                    if (m.tipo.tipo == Tipos.VOID) {\r\n                        const error = new Error(\"Semantico\", \"No se puede declarar la variable con tipo void\", m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n\r\n                    let simbolo:Simbolo;\r\n                    simbolo = new Simbolo(m.tipo, m.identificador, result, this.constante);\r\n                    const res = tabla.setVariable(simbolo);\r\n                    if (res != null) {\r\n                        const error = new Error(\"Semantico\", res, m.fila, m.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        retorno = error;\r\n                        return error;\r\n                    }\r\n                    return retorno;\r\n                }\r\n\r\n            }\r\n            \r\n        });\r\n\r\n        return retorno;\r\n    }\r\n\r\n    getConstante(){\r\n        if(this.constante){\r\n            return \"const\";\r\n        }else{\r\n            return \"let\";\r\n        }\r\n    };\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\n\r\n/**\r\n * @class Nodo expresion break, nos indica cuando terminar un ciclo\r\n */\r\n\r\nexport class Break extends NodoAST {\r\n\r\n    /**\r\n     * @constructor Retorna el objeto break creado\r\n     * @param line Linea del break\r\n     * @param column Columna del break\r\n     */\r\n    \r\n    constructor(fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        return this;\r\n    }\r\n}","//Carpeta AST\r\nimport { AST } from \"./AST/AST\";\r\nimport { Error } from \"./AST/Error\";\r\nimport { NodoAST } from \"./AST/NodoAST\";\r\nimport { Simbolo } from \"./AST/Simbolo\";\r\nimport { Tabla } from \"./AST/Tabla\";\r\nimport { Tipo,Tipos } from \"./AST/Tipo\";\r\n\r\n//Carpeta Expresion\r\nimport { Aritmetica } from \"./Expresion/Aritmetica\";\r\nimport { Primitivo } from \"./Expresion/Primitivo\";\r\nimport { Logica } from \"./Expresion/Logica\";\r\nimport { Relacional } from \"./Expresion/Relacional\";\r\nimport { Identificador } from \"./Expresion/Identificador\";\r\nimport { Continue } from \"./Expresion/Continue\";\r\nimport { Break } from \"./Expresion/Break\";\r\nimport { Return } from \"./Expresion/Return\";\r\n\r\n//Carpeta Instruccion\r\nimport { ConsoleLog } from \"./Instruccion/ConsoleLog\";\r\nimport { Declaracion } from './Instruccion/Declaracion';\r\nimport { Asignacion } from './Instruccion/Asignacion';\r\nimport { If } from './Instruccion/If';\r\nimport { While } from './Instruccion/While';\r\nimport { DoWhile } from './Instruccion/DoWhile';\r\nimport { For } from './Instruccion/For';\r\nimport { Switch } from './Instruccion/Switch';\r\nimport { Case } from './Instruccion/Case';\r\nimport { Ternario } from './Instruccion/Ternario';\r\nimport { Funcion } from './Instruccion/Funcion';\r\nimport { UsoFuncion } from './Instruccion/UsoFuncion';\r\nimport { graficar_ts } from './Instruccion/graficar_ts';\r\n\r\n\r\n\r\nimport { relative } from 'path';\r\nimport { ParsedEvent } from '@angular/compiler';\r\n\r\nexport class graficarAST{\r\n    ast:AST;\r\n    nodo:Nodo;\r\n    root:Nodo;\r\n\r\n    constructor(ast:AST){\r\n        this.ast = ast;\r\n        this.root = new Nodo(\"Root\", null, []);\r\n        let lista = new Nodo(\"Lista de instrucciones\", this.root, []);\r\n        for(let i = 0; i < ast.instrucciones.length; i++){\r\n          if(!(ast.instrucciones[i] instanceof Error)){\r\n            lista.children.push(this.instruccion(ast.instrucciones[i]));\r\n          }\r\n        }\r\n        this.root.children.push(lista);\r\n        this.root.children.push(new Nodo(\"#\", this.root, []));\r\n    }\r\n\r\n    instruccion(m:NodoAST):Nodo{\r\n      let padre = new Nodo(\"Instruccion\", null, []);\r\n\r\n      if(m instanceof Declaracion){\r\n        padre.children.push(this.declaracion(m));\r\n\r\n      }else if(m instanceof Asignacion){\r\n        padre.children.push(this.asignacion(m));\r\n\r\n      }else if(m instanceof ConsoleLog){\r\n        padre.children.push(this.consolelog(m));\r\n        \r\n      }else  if(m instanceof DoWhile){\r\n        padre.children.push(this.dowhile(m));\r\n        \r\n      }else if(m instanceof For){\r\n        padre.children.push(this.for(m));\r\n        \r\n      }else  if(m instanceof If){\r\n        this.if(m, padre);\r\n        \r\n      }else if(m instanceof Switch){\r\n        padre.children.push(this.switch(m));\r\n        \r\n      }else if(m instanceof While){\r\n        padre.children.push(this.while(m));\r\n        \r\n      }else if(m instanceof Break){\r\n        padre.children.push(this.break(m));\r\n\r\n      }else if(m instanceof Continue){\r\n        padre.children.push(this.continue(m));\r\n\r\n      }else if(m instanceof Return){\r\n        padre.children.push(this.valor(m));\r\n\r\n      }else if(m instanceof Funcion){\r\n        padre.children.push(this.funcion(m));\r\n        \r\n      }else if(m instanceof UsoFuncion){\r\n        padre.children.push(this.usofuncion(m));\r\n        \r\n      }else if(m instanceof graficar_ts){\r\n        padre.children.push(this.graficar_ts(m));\r\n        \r\n      }\r\n  \r\n      return padre;\r\n    }\r\n\r\n    graficar_ts(m:graficar_ts){\r\n      let padre = new Nodo(\"graficar_ts\", null, []);\r\n      return padre;\r\n    }\r\n    \r\n    usofuncion(m:UsoFuncion){\r\n      let padre = new Nodo(\"Uso de funcion \"+m.identificador, null, []);\r\n      \r\n      let lista = new Nodo(\"Parametros\", padre, []);\r\n      m.parametros.map((p) => {\r\n        lista.children.push(this.valor(p));\r\n      });\r\n      padre.children.push(lista);\r\n\r\n      return padre;\r\n    }\r\n\r\n    funcion(m:Funcion){\r\n      let padre = new Nodo(\"Funcion \"+m.identificador, null, []);\r\n      \r\n      let lm = new Nodo(\"Lista de parametros\", padre, []);\r\n\r\n      m.parametros.map((p) => {\r\n        let lista = new Nodo(\"Parametro\", padre, []);\r\n        lista.children.push(this.valor(p));\r\n        lista.children.push(new Nodo(\"Tipo\", padre, [new Nodo(p.tipo.toString(), padre, [])]));\r\n        lm.children.push(lista);\r\n      });\r\n      padre.children.push(lm);\r\n\r\n      if(m.tipo != null){\r\n        padre.children.push(new Nodo(\"Tipo\", padre, [new Nodo(m.tipo.toString(), null, [])]));\r\n      }\r\n\r\n      let listas = new Nodo(\"Lista de instrucciones\", padre, []);\r\n      m.sentencias.map((p) => {\r\n        listas.children.push(this.instruccion(p));\r\n      });\r\n      padre.children.push(listas);\r\n      \r\n      return padre;\r\n    }\r\n\r\n    ternario(m:Ternario){\r\n      let padre = new Nodo(\"Ternario\", null, []);\r\n      \r\n      let w = new Nodo(\"Condicion\", null, []);\r\n      w.children.push(this.valor(m.condicion));\r\n      padre.children.push(w);\r\n\r\n      let w1 = new Nodo(\"Eleccion 1\", null, []);\r\n      w1.children.push(this.valor(m.primero));\r\n      padre.children.push(w1);\r\n\r\n      let w2 = new Nodo(\"Eleccion 2\", null, []);\r\n      w2.children.push(this.valor(m.segundo));\r\n      padre.children.push(w2);\r\n      \r\n      return padre;\r\n    }\r\n\r\n    while(m:While){\r\n      let padre = new Nodo(\"While\", null, []);\r\n      \r\n      let w = new Nodo(\"Condicion\", null, []);\r\n      w.children.push(this.valor(m.condicion));\r\n      padre.children.push(w);\r\n\r\n      let lista = new Nodo(\"Lista de instrucciones\", padre, []);\r\n      m.sentencias.map((p) => {\r\n        lista.children.push(this.instruccion(p));\r\n      });\r\n      padre.children.push(lista);\r\n      \r\n      return padre;\r\n    }\r\n\r\n    switch(m:Switch){\r\n      let padre = new Nodo(\"Switch\", null, []);\r\n\r\n      let c = new Nodo(\"Condicion\", padre, []);\r\n      c.children.push(this.valor(m.condicion));\r\n      padre.children.push(c);\r\n\r\n      let listacases = new Nodo(\"Lista cases\", padre, []);\r\n      m.cases.map((p:Case) => {\r\n        let i:Nodo = null;\r\n        if(p.esDefault){\r\n          i = new Nodo(\"Default\", listacases, []);\r\n        }else{\r\n          i = new Nodo(\"Case\", listacases, []);\r\n          \r\n          let con = new Nodo(\"Condicion\", i, []);\r\n          con.children.push(this.valor(p.condicion));\r\n          i.children.push(con);\r\n        }\r\n\r\n        let listains = new Nodo(\"Lista de instrucciones\", i, []);\r\n        p.sentencias.map((t) => {\r\n          listains.children.push(this.instruccion(t));\r\n        });\r\n        i.children.push(listains);\r\n\r\n        listacases.children.push(i);\r\n      });\r\n      padre.children.push(listacases);\r\n      \r\n      return padre;\r\n    }\r\n\r\n    if(m:If, padre:Nodo){\r\n      let ifp = new Nodo(\"If\", null, []);\r\n      padre.children.push(ifp);\r\n\r\n      let condicion = new Nodo(\"Condicion\", ifp, []);\r\n      condicion.children.push(this.valor(m.condicion));\r\n      ifp.children.push(condicion);\r\n\r\n      let lista = new Nodo(\"Lista de instrucciones\", ifp, []);\r\n      m.sentenciasIF.map((p) => {\r\n        lista.children.push(this.instruccion(p));\r\n      });\r\n      ifp.children.push(lista);\r\n\r\n      let elseiflista = new Nodo(\"Lista else if\", ifp, []);\r\n      m.listaIFS.map((p:If) => {\r\n        let elseif = new Nodo(\"Else if\", elseiflista, []);\r\n        \r\n        let cef = new Nodo(\"Condicion\", elseif, []);\r\n        cef.children.push(this.valor(m.condicion));\r\n        elseif.children.push(cef);\r\n\r\n        let listaef = new Nodo(\"Lista de instrucciones\", elseif, []);\r\n        p.sentenciasIF.map((t) => {\r\n          listaef.children.push(this.instruccion(t));\r\n        });\r\n        elseif.children.push(listaef);\r\n\r\n        elseiflista.children.push(elseif);\r\n      });\r\n      padre.children.push(elseiflista);\r\n\r\n      let elselista = new Nodo(\"Else\", ifp, []);\r\n      m.sentenciasELSE.map((p) => {\r\n        elselista.children.push(this.instruccion(p));\r\n      });\r\n      padre.children.push(elselista);\r\n      \r\n    }\r\n\r\n    for(m:For){\r\n      let padre = new Nodo(\"For\", null, []);\r\n\r\n      let c = new Nodo(\"Control\", padre, []);\r\n      c.children.push(this.instruccion(m.comienzo));\r\n      padre.children.push(c);\r\n\r\n      let d = new Nodo(\"Condicion\", padre, []);\r\n      d.children.push(this.valor(m.condicion));\r\n      padre.children.push(d);\r\n\r\n      let i = new Nodo(\"Iterador\", padre, []);\r\n      i.children.push(this.instruccion(m.iterador));\r\n      padre.children.push(i);\r\n\r\n      let lista = new Nodo(\"Lista de instrucciones\", padre, []);\r\n      m.sentencias.map((p) => {\r\n        lista.children.push(this.instruccion(p));\r\n      });\r\n      padre.children.push(lista);\r\n      \r\n      return padre;\r\n    }\r\n\r\n    dowhile(m:DoWhile){\r\n      let padre = new Nodo(\"Do While\", null, []);\r\n      let lista = new Nodo(\"Lista de instrucciones\", padre, []);\r\n      m.sentencias.map((p) => {\r\n        lista.children.push(this.instruccion(p));\r\n      });\r\n      padre.children.push(lista);\r\n      \r\n      let w = new Nodo(\"Condicion\", null, []);\r\n      w.children.push(this.valor(m.condicion));\r\n      padre.children.push(w);\r\n      return padre;\r\n    }\r\n\r\n    consolelog(m:ConsoleLog){\r\n      let padre = new Nodo(\"console.log\", null, []);\r\n      padre.children.push(this.valor(m.expresion));\r\n      return padre;\r\n    }\r\n    \r\n    asignacion(m:Asignacion){\r\n      let padre = new Nodo(\"Asignacion\", null, []);\r\n      let lista = new Nodo(\"Lista de asignaciones\", null, []);\r\n      m.asignaciones.map((p:Identificador) => {\r\n        let a = new Nodo(\"asignaciones\", null, []);\r\n        a.children.push(this.identificador(p));\r\n        if(p.valor != null){\r\n          let op = new Nodo(\"Operador\", padre, [new Nodo(\"=\", null, [])]);\r\n          a.children.push(op);\r\n          a.children.push(this.valor(p.valor));\r\n        }\r\n        lista.children.push(a);\r\n      });\r\n      padre.children.push(lista);\r\n      return padre;\r\n    }\r\n  \r\n    declaracion(m:Declaracion){\r\n      let padre = new Nodo(\"Declaracion\", null, []);\r\n      padre.children.push(new Nodo(m.getConstante(), padre, []));\r\n      let lista = new Nodo(\"Lista de declaraciones\", null, []);\r\n      m.declaraciones.map((p:Identificador) => {\r\n        let d = new Nodo(\"declaracion\", null, []);\r\n        d.children.push(this.identificador(p));\r\n        if(p.tipo != null){\r\n          d.children.push(new Nodo(\"Tipo\", padre, [new Nodo(p.tipo.toString(), null, [])]));\r\n        }\r\n        if(p.valor != null){\r\n          let op = new Nodo(\"Operador\", padre, [new Nodo(\"=\", null, [])]);\r\n          d.children.push(op);\r\n          d.children.push(this.valor(p.valor));\r\n        }\r\n        lista.children.push(d);\r\n      });\r\n      padre.children.push(lista);\r\n      return padre;\r\n    }\r\n\r\n    identificador(m:Identificador){\r\n      let padre = new Nodo(\"Identificador\", null, []);\r\n      padre.children.push(new Nodo(m.identificador, padre, []));\r\n      return padre;\r\n    }\r\n\r\n    break(m:Break){\r\n      let padre = new Nodo(\"Break\", null, []);\r\n      return padre;\r\n    }\r\n\r\n    continue(m:Continue){\r\n      let padre = new Nodo(\"Continue\", null, []);\r\n      return padre;\r\n    }\r\n\r\n    return(m:Return){\r\n      let padre = new Nodo(\"Return\", null, []);\r\n      if(m.valor != null){\r\n        padre.children.push(this.valor(m.valor));\r\n      }\r\n      return padre;\r\n    }\r\n\r\n    valor(m:NodoAST){\r\n      if(m instanceof Aritmetica){\r\n        return this.aritmetico(m);\r\n\r\n      }else if(m instanceof Logica){\r\n        return this.logica(m);\r\n\r\n      }else if(m instanceof Relacional){\r\n        return this.relacional(m);\r\n\r\n      }else if(m instanceof Primitivo){\r\n        return this.primitivo(m);\r\n\r\n      }if(m instanceof Identificador){\r\n        return this.identificador(m);\r\n\r\n      }if(m instanceof Ternario){\r\n        return this.ternario(m); \r\n\r\n      }\r\n\r\n      return new Nodo(\"ERROR\", null, []);\r\n    }\r\n\r\n    primitivo(m:Primitivo){\r\n      let padre = new Nodo(\"Primitivo\", null, []);\r\n      padre.children.push(new Nodo(m.valor+\"\", padre, []));\r\n      return padre;\r\n    }\r\n\r\n    aritmetico(m:Aritmetica){\r\n      let padre = new Nodo(\"Aritmetica\", null, []);\r\n      let op = new Nodo(\"Operador\", padre, [new Nodo(m.operacion, null, [])]);\r\n      if(m.derecho != null){\r\n        padre.children.push(this.valor(m.izquierdo));\r\n        padre.children.push(op);\r\n        padre.children.push(this.valor(m.derecho));\r\n      }else{\r\n        padre.children.push(op);\r\n        padre.children.push(this.valor(m.izquierdo));\r\n      }\r\n      return padre;\r\n    }\r\n\r\n    logica(m:Logica){\r\n      let padre = new Nodo(\"Logica\", null, []);\r\n      let op = new Nodo(\"Operador\", padre, [new Nodo(m.operador, null, [])]);\r\n      if(m.derecho != null){\r\n        padre.children.push(this.valor(m.izquierdo));\r\n        padre.children.push(op);\r\n        padre.children.push(this.valor(m.derecho));\r\n      }else{\r\n        padre.children.push(op);\r\n        padre.children.push(this.valor(m.izquierdo));\r\n      }\r\n      return padre;\r\n    }\r\n\r\n    relacional(m:Relacional){\r\n      let padre = new Nodo(\"Relacional\", null, []);\r\n      let op = new Nodo(\"Operador\", padre, [new Nodo(m.operador, null, [])]);\r\n      if(m.derecho != null){\r\n        padre.children.push(this.valor(m.izquierdo));\r\n        padre.children.push(op);\r\n        padre.children.push(this.valor(m.derecho));\r\n      }else{\r\n        padre.children.push(op);\r\n        padre.children.push(this.valor(m.izquierdo));\r\n      }\r\n      return padre;\r\n    }\r\n}\r\n\r\nexport class Nodo{\r\n    name:String;\r\n    parent:Nodo;\r\n    children:Nodo[];\r\n  \r\n    constructor(name:string, parent:Nodo, children:Nodo[]){\r\n      this.name = name;\r\n      this.parent = parent;\r\n      this.children = children;\r\n    }\r\n}","/**\r\n * @class Nodo para almacenar errores ya sean lexicos, sintacticos o semanticos\r\n */\r\n\r\nexport class Error{\r\n    tipo:string;\r\n    descripcion:string;\r\n    fila:number;\r\n    columna:number;\r\n\r\n    /**\r\n     * Devuelve un objeto con un nuevo objeto excepcion\r\n     * @param type Tipo de error, e.g. (lexico, sintactico, semantico)\r\n     * @param description Descripcion del error, e.g. (No se encontro la variable X)\r\n     * @param line Fila donde ocurrio el error\r\n     * @param column Columna donde ocurrio el error\r\n     */\r\n\r\n    constructor(tipo:string, descripcion:string, fila:number, columna:number){\r\n        this.tipo = tipo;\r\n        this.descripcion = descripcion;\r\n        this.fila = fila;\r\n        this.columna = columna;\r\n    }\r\n\r\n    toString(){\r\n        return \"Tipo:\" + this.tipo + \" Descripcion:\" + this.descripcion + \" Fila:\" + this.fila + \" Columna:\" + this.columna;\r\n    }\r\n\r\n}","import { Component } from '@angular/core';\n\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Proyecto1';\n\n  \n}\n\n","\n<app-pagina></app-pagina>\n<router-outlet></router-outlet>","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Return } from './Return';\r\n\r\n/**\r\n * @class Genera un nuevo nodo expresion para realizar operaciones aritmeticas\r\n */\r\n\r\nexport class Aritmetica extends NodoAST {\r\n    izquierdo:NodoAST;\r\n    derecho:NodoAST;\r\n    operacion:string;\r\n\r\n    /**\r\n     * @constructor Devuelve el nodo expresion para ser utilizado con otras operaciones\r\n     * @param izquierdo Nodo expresion izquierdo\r\n     * @param derecho Nodo expresion derecho\r\n     * @param operacion Operador\r\n     * @param fila filaa de la operacion\r\n     * @param columna columnaa de la operacion\r\n     */\r\n\r\n    constructor(izquierdo:NodoAST, derecho:NodoAST, operacion:string, fila:number, columna:number) {\r\n        // Envio null porque aun no se el tipo de la operación\r\n        super(null, fila, columna);\r\n        this.izquierdo = izquierdo;\r\n        this.derecho = derecho;\r\n        this.operacion = operacion;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        if(this.derecho != null){\r\n            const operacionIzq = this.izquierdo.ejecutar(tabla, ast);\r\n            if(operacionIzq instanceof Error){\r\n                return operacionIzq;\r\n            }\r\n            const operacionDer = this.derecho.ejecutar(tabla, ast);\r\n            if(operacionDer instanceof Error){\r\n                return operacionDer;\r\n            }\r\n\r\n            if(this.operacion == '+'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq + operacionDer;\r\n                }else if(this.izquierdo.tipo.tipo == Tipos.STRING || this.derecho.tipo.tipo == Tipos.STRING){\r\n                    this.tipo = new Tipo(Tipos.STRING);\r\n                    return operacionIzq + operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> se esta tratando de sumar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '-'){\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq - operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> se esta tratando de restar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '*'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq * operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\",\"Error de Tipos -> se esta tratando de multiplicar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '/'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    if(operacionDer == 0){\r\n                        const error = new Error(\"Semantico\", \"Error aritmetico -> se esta tratando de dividir entre cero \", this.fila, this.columna);\r\n                        ast.errores.push(error);\r\n                        //ast.consola.push(error.toString());\r\n                        return error;\r\n                    }\r\n                    return operacionIzq / operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> se esta tratando de dividir \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '^'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq ** operacionDer;\r\n                    //return operacionIzq ^ operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\",\"Error de Tipos -> se esta tratando de elevar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else if(this.operacion == '%'){\r\n                if(this.izquierdo.tipo.tipo == Tipos.NUMBER && this.derecho.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return operacionIzq % operacionDer;\r\n                }else{\r\n                    const error = new Error(\"Semantico\",\"Error de Tipos -> se esta tratando de obtener el modulo \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else{\r\n                const error = new Error(\"Semantico\", \"Error, Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n\r\n        }else{\r\n            const operacionIzq = this.izquierdo.ejecutar(tabla, ast);\r\n            if(operacionIzq instanceof Error){\r\n                return operacionIzq;\r\n            }\r\n\r\n            if(this.operacion == '-'){\r\n                if (this.izquierdo.tipo.tipo == Tipos.NUMBER){\r\n                    this.tipo = new Tipo(Tipos.NUMBER);\r\n                    return -1*operacionIzq;\r\n                }else{\r\n                    const error = new Error(\"Semantico\", \"Error de Tipos -> el operador unario tratando de operar \" + this.izquierdo.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.toString());\r\n                    return error;\r\n                }\r\n            }else{\r\n                const error = new Error(\"Semantico\", \"Error -> Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Simbolo } from \"../AST/Simbolo\";\r\nimport { Identificador } from '../Expresion/Identificador';\r\n\r\n/**\r\n * @class Reasigna el valor de una variable existente\r\n */\r\n\r\nexport class Asignacion extends NodoAST {\r\n    asignaciones:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia Asignacion\r\n     * @param identificador nombre de la variable\r\n     * @param valor valor de la variable\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(asignaciones:NodoAST[], fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n        this.asignaciones = asignaciones;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST) {\r\n        let retorno = null;\r\n        this.asignaciones.map((m:Identificador) =>{\r\n            const result = m.valor.ejecutar(tabla, ast);\r\n            if (result instanceof Error) {\r\n                retorno = result;\r\n                return result;\r\n            }\r\n\r\n            let variable:Simbolo;\r\n            variable = tabla.getVariable(m.identificador);\r\n            if (variable == null) {\r\n                const error = new Error(\"Semantico\",\"No se ha encontrado la variable \" + m.identificador, m.fila, m.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                retorno = error;\r\n                return error;\r\n            }else if(variable.constante == true){\r\n                const error = new Error(\"Semantico\",\"No se puede asignar un nuevo valor a la constante \" + m.identificador, m.fila, m.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                retorno = error;\r\n                return error;\r\n            }\r\n\r\n            if(variable.tipo == null){\r\n                variable.tipo = m.valor.tipo;\r\n            }else if (m.valor.tipo.tipo != variable.tipo.tipo) {\r\n                const error = new Error(\"Semantico\",\"No se puede asignar la variable porque los tipos no coinciden\", m.fila, m.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                retorno = error;\r\n                return error;\r\n            }\r\n\r\n            variable.valor = result;\r\n            return retorno;\r\n            \r\n        });\r\n        \r\n        return retorno;\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from \"@angular/common\";\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PaginaComponent } from './pagina/pagina.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PaginaComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    CodemirrorModule,\n    FormsModule,\n    CommonModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class Ternario extends NodoAST {\r\n    condicion:NodoAST;\r\n    primero:NodoAST;\r\n    segundo:NodoAST;\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(condicion:NodoAST, primero:NodoAST, segundo:NodoAST, fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.condicion = condicion;\r\n        this.primero = primero;\r\n        this.segundo = segundo;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const nuevoEntorno = new Tabla(tabla);\r\n        let result:NodoAST;\r\n        result = this.condicion.ejecutar(nuevoEntorno, ast);\r\n        if (result instanceof Error) {\r\n            return result;\r\n        }\r\n\r\n        if (this.condicion.tipo.tipo != Tipos.BOOLEAN) {\r\n            const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }\r\n\r\n        if (result) {\r\n            const res = this.primero.ejecutar(nuevoEntorno, ast);\r\n            this.tipo = this.primero.tipo;\r\n            return res;\r\n            \r\n        } else {\r\n            const res = this.segundo.ejecutar(nuevoEntorno, ast);\r\n            this.tipo = this.segundo.tipo;\r\n            return res;\r\n            \r\n        }\r\n\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\n\n//Carpeta AST\nimport { AST } from \"./Ejecucion/AST/AST\";\nimport { Error } from \"./Ejecucion/AST/Error\";\nimport { NodoAST } from \"./Ejecucion/AST/NodoAST\";\nimport { Simbolo } from \"./Ejecucion/AST/Simbolo\";\nimport { Tabla } from \"./Ejecucion/AST/Tabla\";\nimport { Tipo,Tipos } from \"./Ejecucion/AST/Tipo\";\n\n//Carpeta Expresion\nimport { Aritmetica } from \"./Ejecucion/Expresion/Aritmetica\";\nimport { Primitivo } from \"./Ejecucion/Expresion/Primitivo\";\nimport { Logica } from \"./Ejecucion/Expresion/Logica\";\nimport { Relacional } from \"./Ejecucion/Expresion/Relacional\";\nimport { Identificador } from \"./Ejecucion/Expresion/Identificador\";\nimport { Continue } from \"./Ejecucion/Expresion/Continue\";\nimport { Break } from \"./Ejecucion/Expresion/Break\";\nimport { Return } from \"./Ejecucion/Expresion/Return\";\n\n//Carpeta Instruccion\nimport { ConsoleLog } from \"./Ejecucion/Instruccion/ConsoleLog\";\nimport { Declaracion } from './Ejecucion/Instruccion/Declaracion';\nimport { Asignacion } from './Ejecucion/Instruccion/Asignacion';\nimport { If } from './Ejecucion/Instruccion/If';\nimport { While } from './Ejecucion/Instruccion/While';\nimport { DoWhile } from './Ejecucion/Instruccion/DoWhile';\nimport { For } from './Ejecucion/Instruccion/For';\nimport { Switch } from './Ejecucion/Instruccion/Switch';\nimport { Case } from './Ejecucion/Instruccion/Case';\nimport { Ternario } from './Ejecucion/Instruccion/Ternario';\nimport { Funcion } from './Ejecucion/Instruccion/Funcion';\nimport { UsoFuncion } from './Ejecucion/Instruccion/UsoFuncion';\nimport { graficar_ts } from './Ejecucion/Instruccion/graficar_ts';\n\n//Funciones extra\nimport { graficarAST,Nodo } from \"./Ejecucion/graficarAST\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\nimport { PdfMakeWrapper, Table, Txt } from 'pdfmake-wrapper';\nimport pdfMake from \"pdfmake/build/pdfmake\";\n\n//Analizador\nvar parser  = require(\"./Ejecucion/gramatica.js\");\ndeclare var generateTree;\n\n\nimport { stringify } from 'querystring';\n\n@Component({\n  selector: 'app-pagina',\n  templateUrl: './pagina.component.html',\n  styleUrls: ['./pagina.component.css']\n})\nexport class PaginaComponent implements OnInit {\n\n  constructor() {\n    \n  }\n\n  entrada;\n  salida;\n  errores:Error[] = [];\n  ast:AST = null;\n  astR:AST = null;\n  tabla:Tabla = null;\n\n  ngOnInit(): void {\n  }\n\n  \n\n  //aqui va todo el codigo xd\n  exec(){\n    //var entrada = (document.getElementById(\"txtEntrada\") as HTMLInputElement).value;\n    \n    let ast:AST = parser.parse(this.entrada);\n    this.astR = parser.parse(this.entrada);\n    let tabla:Tabla= new Tabla(null);\n    \n    ast.instrucciones.map((m) =>{\n      if(m instanceof Declaracion || m instanceof Funcion){\n        m.ejecutar(tabla, ast);\n      }\n    });\n\n    console.log(tabla);\n\n    try {\n      ast.instrucciones.map((m) =>{\n        if(!(m instanceof Declaracion) && !(m instanceof Funcion)){\n          m.ejecutar(tabla, ast);\n        }\n      });\n    } catch (error) {\n      \n    }\n    \n\n    console.log(ast);\n\n    let a:string = \"\";\n    ast.consola.map((m) =>{\n      a += m+\"\\n\";\n    });\n\n    ast.errores.map((m) =>{\n      console.log(m.toString());\n    });\n\n    //var json = JSON.stringify(ast,null,3);\n    //console.log(json);\n    this.salida = a;\n    this.ast = ast;\n    this.tabla = tabla;\n\n  }\n\n  vast = true;\n  verAST(){\n    var tree = document.getElementById('ast');\n    \n    if(this.vast && this.astR != null){\n      let n = new graficarAST(this.astR);\n      let m:Nodo = n.root;\n      generateTree([m]);\n      tree.setAttribute('class','card-group p-5 visible');\n      this.vast = false;\n    }else{\n      tree.setAttribute('class','card-group p-5 invisible');\n      document.getElementById(\"grafo\").setAttribute('width','0');\n      document.getElementById(\"grafo\").setAttribute('height','0');\n      document.getElementById(\"grafo\").innerHTML = \"\";\n      this.vast = true;\n    }\n  }\n\n  verrores = true;\n  verErrores(){\n    var tree = document.getElementById('errores');\n    if(this.verrores && this.ast != null){\n      for (let index = 0; index < this.ast.errores.length; index++) {\n        let error = this.ast.errores[index];\n        let tr = \"<tr>\";\n        tr += \"<td>\" + error.tipo + \"</td>\";\n        tr += \"<td>\" + error.descripcion + \"</td>\";\n        tr += \"<td>\" + error.fila + \"</td>\";\n        tr += \"<td>\" + error.columna + \"</td>\";\n        tr += \"</tr>\";\n        document.getElementById(\"infoTabla\").innerHTML += tr ;\n      }\n      tree.setAttribute('class','card-group visible');\n      this.verrores = false;\n    }else{\n      document.getElementById(\"infoTabla\").innerHTML = \"\" ;\n      tree.setAttribute('class','card-group invisible');\n      this.verrores = true;\n    }\n  }\n\n  verent = true;\n  verEntornos(){\n    var tree = document.getElementById('ambitos');\n    if(this.verent){\n      tree.setAttribute('class','card-group bg-transparent visible');\n      this.verent = false;\n    }else{\n      document.getElementById(\"tablaambitos\").innerHTML = \"\" ;\n      tree.setAttribute('class','card-group bg-transparent invisible');\n      this.verent = true;\n    }\n  }\n\n  traducir(){\n    let ast:AST = parser.parse(this.entrada);\n\n    for(let i = 0; i < ast.instrucciones.length; i++){\n      //this.analizar(ast.instrucciones[i]);\n    }\n  }\n\n}\n\n","\n<nav class=\"navbar navbar-light bg-secondary\">\n    <div class=\"container\">\n        <h1>MatrioshTS</h1>\n    </div>\n    \n</nav>\n\n<div class=\"card-group p-5\" role=\"group\">\n    <div  class=\"card bg-success\">\n        <h4 _ngcontent-srk-c16=\"\" class=\"list-group-item list-group-item-primary text-center text-success bg-light\">Entrada</h4>\n        <div _ngcontent-srk-c16=\"\" class=\"card-body p-3 mb-2 bg-transparent\">\n            <ngx-codemirror [(ngModel)]=\"entrada\" [options]=\"{ lineNumbers: true, theme: '3024-night', mode: 'javascript'}\">\n            </ngx-codemirror>\n        </div>\n        <button _ngcontent-srk-c16=\"\" (click)=\"exec()\" type=\"button\" id=\"btnEjecutar\" class=\"btn p-2 mb-1 btn-outline-success btn-lg bg-warning text-light\">Ejecutar</button>\n        <button _ngcontent-srk-c16=\"\" (click)=\"traducir()\" type=\"button\" id=\"tbnTraducir\" class=\"btn p-2 mb-1 btn-outline-success btn-lg bg-info text-light\">Traducir</button>\n    </div>\n    <div _ngcontent-srk-c16=\"\" class=\"card bg-danger\">\n        <h4 _ngcontent-srk-c16=\"\" class=\"list-group-item list-group-item-primary text-center text-danger bg-light\">Salida</h4>\n        <div _ngcontent-srk-c16=\"\" class=\"card-body  bg-secondary btn-lg bg-danger\">\n            <ngx-codemirror [(ngModel)]=\"salida\" [options]=\"{ lineNumbers: true, theme: '3024-night', mode: 'javascript', readOnly: 'true'}\">\n            </ngx-codemirror>    \n        </div>\n        <button _ngcontent-srk-c16=\"\" (click)=\"verAST()\" type=\"button\" id=\"btnAST\" class=\"btn p-2 mb-1 btn-outline-danger btn-lg bg-primary text-light\">AST</button>\n        <button _ngcontent-srk-c16=\"\" (click)=\"verErrores()\" type=\"button\" id=\"btnErrores\" class=\"btn p-2 mb-1 btn-outline-danger btn-lg bg-secondary text-light\">Errores</button>\n        <button _ngcontent-srk-c16=\"\" (click)=\"verEntornos()\" type=\"button\" id=\"btnEntorno\" class=\"btn p-2 mb-1 btn-outline-danger btn-lg bg-success text-light\">Entornos</button>\n    </div>\n</div>\n\n<div class=\"card-group bg-transparent invisible\"  role=\"group\" id=\"errores\">\n    <div _ngcontent-srk-c16=\"\" class=\"card table-responsive\"  >\n        <table class=\"table table-bordered table-striped text-center\" id=\"tablaErrores\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">Tipo</th>\n                    <th scope=\"col\">Descripcion</th>\n                    <th scope=\"col\">Fila</th>\n                    <th scope=\"col\">Columna</th>\n                </tr>\n            </thead>\n            \n            <tbody id=\"infoTabla\" >\n                <!--><option *gnFor=\"let valor of this.errores\">\n                    <tr>\n                        <th scope=\"col\">{{valor.tipo}}</th>\n                        <th scope=\"col\">{{valor.descripcion}}</th>\n                        <th scope=\"col\">{{valor.fila}}</th>\n                        <th scope=\"col\">{{volor.columna}}</th>\n                    </tr>\n                </option><-->\n            </tbody>\n        </table>\n    </div>\n</div>\n\n<div class=\"card-group bg-transparent\"  role=\"group\">\n\n</div>\n\n<div class=\"card-group bg-transparent invisible\"  role=\"group\" id=\"ambitos\">\n    <div _ngcontent-srk-c16=\"\" class=\"card table-responsive\"  id=\"tablaambitos\">\n        \n    </div>\n</div>\n\n<div class=\"card-group p-5 invisible\" role=\"group\" id=\"ast\">\n    <div _ngcontent-srk-c16=\"\" class=\"card bg-transparent\">\n        <svg></svg>\n    </div>\n</div>\n","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\nimport { Return } from \"../Expresion/Return\";\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class While extends NodoAST {\r\n    condicion:NodoAST;\r\n    sentencias:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(condicion:NodoAST, sentencias:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.condicion = condicion;\r\n        this.sentencias = sentencias;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        let enciclado = 0;\r\n\r\n        for (let index = 0; index <= 10000; index++){\r\n            const nuevoEntorno = new Tabla(tabla);\r\n            let result:NodoAST;\r\n            result = this.condicion.ejecutar(nuevoEntorno, ast);\r\n            if (result instanceof Error) {\r\n                return result;\r\n            }\r\n\r\n            if (this.condicion.tipo.tipo != Tipos.BOOLEAN) {\r\n                const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n\r\n            if (result) {\r\n                for(let i = 0; i < this.sentencias.length; i++){\r\n                    let m = this.sentencias[i];\r\n                    const res = m.ejecutar(nuevoEntorno, ast);\r\n                    if(res instanceof Continue || res instanceof Break || res instanceof Error || res instanceof Return){\r\n                        index = 10000;\r\n                        return res;\r\n                    }\r\n                    if(m instanceof Return){\r\n                        return m;\r\n                    }\r\n                }\r\n                \r\n            }else{\r\n                break;\r\n            }\r\n\r\n            enciclado = index;\r\n        }\r\n\r\n        if(enciclado == 10000){\r\n            const error = new Error(\"Semantico\", \"Se ha enciclado la sentencia While\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}","import { Simbolo } from \"./Simbolo\";\r\n\r\n/**\r\n * @class En esta clase es donde vamos a guardar y obtener las variables y funciones\r\n */\r\n\r\nexport class Tabla{\r\n    anterior:Tabla;\r\n    variables:Map<String, Simbolo>;\r\n\r\n    /**\r\n     * @constructor Crea una nueva tabla\r\n     * @param Previous Tabla anterior para manejar los ambitos\r\n     */\r\n\r\n    constructor(anterior:Tabla){\r\n        this.anterior = anterior;\r\n        this.variables = new Map<String, Simbolo>();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @method setVariable Almacena una variable, si ya existe arroja error\r\n     * @param simbol Simbolo que contiene la informacion de la variable a almacenar\r\n     */\r\n\r\n    setVariable(simbolo:Simbolo){\r\n        let env:Tabla=this;\r\n        //for(env = this; env != null; env = env.anterior){\r\n        for(let key of Array.from( env.variables.keys()) ) {\r\n            if(key == simbolo.id){\r\n                return \"La variable \" + key + \" ya ha sido declarada\";\r\n            }\r\n        }\r\n        //}\r\n        this.variables.set(simbolo.id, simbolo);\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * @method getVariable Obtiene una variable dentro de la tabla de simbolos\r\n     * @param identifier Nombre de la variable a obtener\r\n     */\r\n\r\n    getVariable(id:string):Simbolo{\r\n        let env:Tabla;\r\n        for(env = this; env != null; env = env.anterior){\r\n            for(let key of Array.from(env.variables.keys())) {\r\n                if(key == id){\r\n                    return env.variables.get(key);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n   \r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\nimport { Return } from \"../Expresion/Return\";\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class Case extends NodoAST {\r\n    esDefault:boolean;\r\n    condicion:NodoAST;\r\n    sentencias:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(esDefault:boolean, condicion:NodoAST, sentencias:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.esDefault = esDefault;\r\n        this.condicion = condicion;\r\n        this.sentencias = sentencias;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        const nuevoEntorno = new Tabla(tabla);\r\n\r\n        for(let i = 0; i < this.sentencias.length; i++){\r\n            let m = this.sentencias[i];\r\n            const res = m.ejecutar(nuevoEntorno, ast);\r\n            if(res instanceof Continue || res instanceof Break || res instanceof Error || res instanceof Return){\r\n                return res;\r\n            }\r\n            if(m instanceof Return){\r\n                return m;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Return } from './Return';\r\n\r\n/**\r\n * @class Genera un nuevo nodo expresion para realizar operaciones logicas\r\n */\r\n\r\n export class Logica extends NodoAST {\r\n    izquierdo:NodoAST;\r\n    derecho:NodoAST;\r\n    operador: string;\r\n\r\n    /**\r\n     * @constructor Devuelve el nodo expresion para ser utilizado con otras operaciones\r\n     * @param izquierdo Nodo expresion izquierdo\r\n     * @param derecho Nodo expresion derecho\r\n     * @param operador Operador\r\n     * @param fila filaa de la operacion\r\n     * @param columna columnaa de la operacion\r\n     */\r\n    constructor(izquierdo: NodoAST, derecho: NodoAST, operador: string, fila: number, columna: number) {\r\n        super(new Tipo(Tipos.BOOLEAN), fila, columna);\r\n        this.izquierdo = izquierdo;\r\n        this.derecho = derecho;\r\n        this.operador = operador;\r\n    }\r\n\r\n    ejecutar(tabla: Tabla, ast: AST) {\r\n        if (this.derecho != null) {\r\n            const LeftResult = this.izquierdo.ejecutar(tabla, ast);\r\n            if (LeftResult instanceof Error) {\r\n                return LeftResult;\r\n            }\r\n\r\n            const RightResult = this.derecho.ejecutar(tabla, ast);\r\n            if (RightResult instanceof Error) {\r\n                return RightResult;\r\n            }\r\n\r\n            if (this.operador == '||') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return LeftResult || RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en OR se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.tostring());\r\n                    return error;\r\n                }\r\n            } else if (this.operador == '&&') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN && this.derecho.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return LeftResult && RightResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en AND se esta tratando de operar \" + this.izquierdo.tipo.toString() + \" y \" + this.derecho.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.tostring());\r\n                    return error;\r\n                }\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error, Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.tostring());\r\n                return error;\r\n            }\r\n\r\n        } else {\r\n            const LeftResult = this.izquierdo.ejecutar(tabla, ast);\r\n            if (LeftResult instanceof Error) {\r\n                return LeftResult;\r\n            }\r\n\r\n            if (this.operador == '!') {\r\n                if (this.izquierdo.tipo.tipo == Tipos.BOOLEAN) {\r\n                    return !LeftResult;\r\n                } else {\r\n                    const error = new Error(\"Semantico\", \"Error de tipos en el operador NOT se esta tratando de operar\" + this.izquierdo.tipo.toString(), this.fila, this.columna);\r\n                    ast.errores.push(error);\r\n                    //ast.consola.push(error.tostring());\r\n                    return error;\r\n                }\r\n            } else {\r\n                const error = new Error(\"Semantico\", \"Error, Operador desconocido\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.tostring());\r\n                return error;\r\n            }\r\n            \r\n        }\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\"\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\nimport { Error } from \"../AST/Error\";\r\nimport { Tipo,Tipos } from \"../AST/Tipo\";\r\nimport { Continue } from \"../Expresion/Continue\";\r\nimport { Break } from \"../Expresion/Break\";\r\n\r\n/**\r\n * @class Ejecuta una serie de instrucciones en caso la condicion sea verdadera sino ejecuta las instrucciones falsas\r\n */\r\n\r\nexport class DoWhile extends NodoAST {\r\n    condicion:NodoAST;\r\n    sentencias:NodoAST[];\r\n\r\n    /**\r\n     * @constructor Crea el nodo instruccion para la sentencia IF\r\n     * @param condicion Condicion que debe ser tipo boolean\r\n     * @param listaIFS Lista de instrucciones a ejecutar en caso la condicion sea verdadera\r\n     * @param sentenciasELSE Lista de instrucciones a ejecutar en caso la condicion sea falsa\r\n     * @param fila filaa de la sentencia if\r\n     * @param columna columnaa de la sentencia if\r\n     */\r\n\r\n    constructor(condicion:NodoAST, sentencias:NodoAST[], fila:number, columna:number){\r\n        super(null, fila, columna);\r\n        this.condicion = condicion;\r\n        this.sentencias = sentencias;\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        let enciclado = 0;\r\n        for (let index = 0; index <= 10000; index++){\r\n            const nuevoEntorno = new Tabla(tabla);\r\n\r\n            for(let i = 0; i < this.sentencias.length; i++){\r\n                let m = this.sentencias[i];\r\n                const res = m.ejecutar(nuevoEntorno, ast);\r\n                if(res instanceof Continue || res instanceof Break || res instanceof Error){\r\n                    index = 10000;\r\n                    return res;\r\n                }\r\n            }\r\n            \r\n            let result:NodoAST;\r\n            result = this.condicion.ejecutar(nuevoEntorno, ast);\r\n            if (result instanceof Error) {\r\n                return result;\r\n            }\r\n\r\n            if (this.condicion.tipo.tipo != Tipos.BOOLEAN) {\r\n                const error = new Error(\"Semantico\", \"Se esperaba una expresion booleana para la condicion\", this.fila, this.columna);\r\n                ast.errores.push(error);\r\n                //ast.consola.push(error.toString());\r\n                return error;\r\n            }\r\n\r\n            if (!result) {\r\n                return null;\r\n            }\r\n            enciclado = index;\r\n        }\r\n\r\n        if(enciclado == 10000){\r\n            const error = new Error(\"Semantico\", \"Se ha enciclado la sentencia Do While\", this.fila, this.columna);\r\n            ast.errores.push(error);\r\n            //ast.consola.push(error.toString());\r\n            return error;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}","import { NodoAST } from './NodoAST';\r\nimport { Error } from \"./Error\";\r\n\r\n/**\r\n * @class Almacena el ast y ademas la lista de excepciones\r\n */\r\n\r\nexport class AST{\r\n    instrucciones:NodoAST[];\r\n    errores:Error[];\r\n    consola:string[];\r\n\r\n    /**\r\n     * Retorna un arbol con 2 atributos: 1 ast y 1 lista de excepciones\r\n     * @param instructions AST generado por la gramatica\r\n     */\r\n\r\n    constructor(instrucciones:NodoAST[], errores:Error[]) {\r\n        this.instrucciones = instrucciones;\r\n        this.errores = errores;\r\n        this.consola = [];\r\n    }\r\n}","import { NodoAST } from \"../AST/NodoAST\";\r\nimport { Tabla } from \"../AST/Tabla\";\r\nimport { AST } from \"../AST/AST\";\r\n\r\n/**\r\n * @class Nodo expresion ontinue, nos indica cuando terminar un ciclo\r\n */\r\n\r\nexport class Continue extends NodoAST {\r\n\r\n    /**\r\n     * @constructor Retorna el objeto break creado\r\n     * @param line Linea del break\r\n     * @param column Columna del break\r\n     */\r\n    \r\n    constructor(fila:number, columna:number) {\r\n        super(null, fila, columna);\r\n    }\r\n\r\n    ejecutar(tabla:Tabla, ast:AST){\r\n        return this;\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Tipo } from \"./Tipo\";\r\n\r\n/**\r\n * @class Esta clase me permite almacenar nodos en mis tablas de simbolos y de funciones \r\n */\r\n\r\nexport class Simbolo{\r\n    tipo:Tipo;\r\n    id:string;\r\n    valor:Object;\r\n    constante:boolean;\r\n\r\n    /**\r\n     * @constructor Para crear un nuevo simbolo a utilizar en una tabla de simbolos o funciones\r\n     * @param type Tipo de la varible o funcion\r\n     * @param identifier Nombre de la variable o funcion\r\n     * @param value Valor de la variable u objeto completo de la función\r\n     */\r\n\r\n    constructor(tipo:Tipo, id:string, valor:Object, constante:boolean) {\r\n        this.tipo = tipo;\r\n        this.id = id;\r\n        this.valor = valor;\r\n        this.constante = constante;\r\n    }\r\n\r\n    getconstante(){\r\n        if(this.constante){\r\n            return \"const\"\r\n        }else{\r\n            return \"let\"\r\n        }\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/markdown/markdown';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}