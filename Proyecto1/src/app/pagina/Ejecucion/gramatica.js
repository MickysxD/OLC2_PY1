/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,43],$V1=[1,42],$V2=[1,40],$V3=[1,41],$V4=[1,24],$V5=[1,33],$V6=[1,34],$V7=[1,35],$V8=[1,25],$V9=[1,26],$Va=[1,38],$Vb=[1,39],$Vc=[1,28],$Vd=[1,52],$Ve=[1,29],$Vf=[1,30],$Vg=[1,32],$Vh=[1,31],$Vi=[1,37],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[2,5,7,28,29,30,31,33,34,35,37,39,42,46,55,59,62,63,64,67,68,70,71,79,91,94,95,96,97,98],$Vr=[69,79,80,81,82,83,84,85,86,87,88,89,90,92,93],$Vs=[2,106],$Vt=[2,107],$Vu=[1,61],$Vv=[1,71],$Vw=[1,76],$Vx=[1,81],$Vy=[1,83],$Vz=[1,82],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[2,113],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,97],$VR=[8,40,60],$VS=[7,8,40,43,47,60,69,79,80,81,82,83,84,85,86,87,88,89,90,92,93],$VT=[1,109],$VU=[8,40],$VV=[2,41],$VW=[1,111],$VX=[1,114],$VY=[1,151],$VZ=[1,154],$V_=[1,155],$V$=[1,156],$V01=[1,157],$V11=[2,5,7,28,29,30,31,33,34,35,37,39,42,46,55,58,59,62,63,64,67,68,70,71,79,91,94,95,96,97,98],$V21=[1,170],$V31=[1,171],$V41=[7,8,40,43,47,60,69,79,80,85,86,87,88,89,90,92,93],$V51=[7,8,40,43,47,60,69,79,80,81,82,85,86,87,88,89,90,92,93],$V61=[7,8,40,43,47,60,69,85,86,87,88,89,90,92,93],$V71=[7,8,40,43,47,60,69,89,90,92,93],$V81=[1,178],$V91=[40,60],$Va1=[7,8,40,45,47,60],$Vb1=[1,189],$Vc1=[7,67,68],$Vd1=[1,200],$Ve1=[43,47],$Vf1=[7,40,60],$Vg1=[1,219],$Vh1=[1,227],$Vi1=[7,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"ERROR":6,"}":7,";":8,"INSTRUCCION":9,"CONSOLE":10,"DECLARACION":11,"ASIGNACION":12,"IF":13,"WHILE":14,"DOWHILE":15,"FOR":16,"SWITCH":17,"BREAK":18,"CONTINUE":19,"RETURN":20,"TERNARIO":21,"FUNCION":22,"USOFUNCION":23,"TYPE":24,"DECLARACION_TYPE":25,"COMENTARIO":26,"GRAFICAR":27,"TK_GRAFICAR":28,"TK_CL":29,"TK_CM":30,"TK_CONSOLE":31,"CONDICION":32,"TK_BREAK":33,"TK_CONTINUE":34,"TK_RETURN":35,"EXPRESION":36,"TK_CONST":37,"LISTA_DECLARACION":38,"TK_LET":39,",":40,"ID_DECLARACION":41,"TK_ID":42,":":43,"TIPO":44,"=":45,"TK_TYPE":46,"{":47,"LISTA_PARAMETROS":48,"LISTA_TYPE":49,"ID_TYPE":50,"LISTA_ASIGNACION":51,"ID_ASIGNACION":52,"++":53,"--":54,"TK_IF":55,"BLOQUE_INSTRUCCIONES":56,"LISTA_IF":57,"TK_ELSE":58,"(":59,")":60,"ELSE_IF":61,"TK_WHILE":62,"TK_DO":63,"TK_SWITCH":64,"LISTA_CASE":65,"CASE":66,"TK_CASE":67,"TK_DEFAULT":68,"?":69,"TK_FOR":70,"TK_FUNCTION":71,"PFUNCION":72,"PARAMETRO":73,"LISTA_IDS":74,"TK_STRING":75,"TK_BOOLEAN":76,"TK_NUMBER":77,"TK_VOID":78,"-":79,"+":80,"*":81,"/":82,"^":83,"%":84,"<":85,">":86,">=":87,"<=":88,"==":89,"!=":90,"!":91,"||":92,"&&":93,"TK_NUMERO":94,"TK_TRUE":95,"TK_FALSE":96,"TK_CADENAC":97,"TK_CADENAS":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"}",8:";",28:"TK_GRAFICAR",29:"TK_CL",30:"TK_CM",31:"TK_CONSOLE",33:"TK_BREAK",34:"TK_CONTINUE",35:"TK_RETURN",37:"TK_CONST",39:"TK_LET",40:",",42:"TK_ID",43:":",45:"=",46:"TK_TYPE",47:"{",53:"++",54:"--",55:"TK_IF",58:"TK_ELSE",59:"(",60:")",62:"TK_WHILE",63:"TK_DO",64:"TK_SWITCH",67:"TK_CASE",68:"TK_DEFAULT",69:"?",70:"TK_FOR",71:"TK_FUNCTION",75:"TK_STRING",76:"TK_BOOLEAN",77:"TK_NUMBER",78:"TK_VOID",79:"-",80:"+",81:"*",82:"/",83:"^",84:"%",85:"<",86:">",87:">=",88:"<=",89:"==",90:"!=",91:"!",92:"||",93:"&&",94:"TK_NUMERO",95:"TK_TRUE",96:"TK_FALSE",97:"TK_CADENAC",98:"TK_CADENAS"},
productions_: [0,[3,2],[3,1],[6,2],[6,2],[4,2],[4,1],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,2],[9,1],[9,1],[9,1],[9,2],[9,1],[27,1],[26,1],[26,1],[10,3],[18,2],[19,2],[20,3],[20,2],[11,2],[11,2],[38,3],[38,1],[41,5],[41,3],[41,3],[41,1],[24,7],[25,9],[25,9],[49,3],[49,1],[50,3],[12,1],[51,3],[51,1],[52,3],[52,2],[52,2],[13,6],[13,4],[13,5],[13,3],[32,3],[56,3],[56,2],[57,2],[57,1],[61,4],[14,3],[15,5],[17,5],[17,4],[65,2],[65,1],[66,4],[66,3],[21,5],[16,9],[16,9],[22,6],[22,4],[72,3],[72,2],[48,3],[48,1],[73,3],[23,4],[23,3],[74,3],[74,1],[44,1],[44,1],[44,1],[44,1],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new AST($$[$0-1], errores); errores = []; return this.$;
break;
case 2:
this.$ = new AST([], errores); errores = []; return this.$;
break;
case 3: case 4:
errores.push(new Error("Sintactico", "Recuperado en: " + $$[$0-1].yyreport_syntax_error + $$[$0-1], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
 this.$ = $$[$0-1];
                                            if($$[$0] instanceof NodoAST){
                                                this.$ = $$[$0-1]; this.$.push($$[$0]);
                                            }
                                          
break;
case 6:
 if($$[$0] instanceof NodoAST){
                                                this.$ = [$$[$0]];
                                            }else{
                                                this.$ = [];
                                            }
                                          
break;
case 7: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 19: case 21: case 22: case 25: case 106: case 107:
this.$ = $$[$0];
break;
case 8: case 9: case 18: case 20: case 58: case 59: case 77: case 114:
this.$ = $$[$0-1];
break;
case 24:
this.$ =$$[$0-1];
break;
case 26:
this.$ = new graficar_ts(_$[$0].first_line, _$[$0].first_column);
break;
case 29:
this.$ = new ConsoleLog($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 31:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 32:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 33:
this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 34:
this.$ = new Declaracion(true, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 35:
this.$ = new Declaracion(false, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 36: case 45: case 79: case 84:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 37: case 46: case 50: case 62: case 69: case 80: case 85:
this.$ = [$$[$0]];
break;
case 38:
this.$ = new Identificador($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 39: case 81:
this.$ = new Identificador($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 40: case 47: case 51:
this.$ = new Identificador($$[$0-2], null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41: case 113:
this.$ = new Identificador($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 42:
this.$ = new Type($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 43:
this.$ = new TypeDeclaracion($$[$0-7], $$[$0-5], $$[$0-2], true, _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 44:
this.$ = new TypeDeclaracion($$[$0-7], $$[$0-5], $$[$0-2], false, _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 48:
this.$ = new Asignacion($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 49:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 52:
this.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '+', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 53:
this.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '-', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 54:
this.$ = new If($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 55:
this.$ = new If($$[$0-2], $$[$0-1], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56:
this.$ = new If($$[$0-3], $$[$0-2], [], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 57:
this.$ = new If($$[$0-1], $$[$0], [], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 60: case 78:
this.$ = [];
break;
case 61:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 63:
this.$ = new If($$[$0-1], $$[$0], [], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 64:
this.$ = new While($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 66:
this.$ = new Switch($$[$0-3], $$[$0-1], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 67:
this.$ = new Switch($$[$0-2], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 68:
this.$ = $$[$0-1]; this.$.push($$[$0])
break;
case 70:
this.$ = new Case(false, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 71:
this.$ = new Case(true, null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 73: case 74:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 75:
this.$ = new Funcion($$[$0-4], $$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 76:
this.$ = new Funcion($$[$0-2], $$[$0-1], new Tipo(Tipos.VOID), $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 82:
this.$ = new UsoFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 83:
this.$ = new UsoFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
this.$ = new Tipo(Tipos.STRING);
break;
case 87:
this.$ = new Tipo(Tipos.BOOLEAN);
break;
case 88:
this.$ = new Tipo(Tipos.NUMBER);
break;
case 89:
this.$ = new Tipo(Tipos.VOID);
break;
case 90:
this.$ = new Aritmetica($$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 91:
this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94:
this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$ = new Logica($$[$0], null, '!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
this.$ = new Logica($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$ = new Logica($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Primitivo(new Tipo(Tipos.NUMBER), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 109:
this.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), true, _$[$0].first_line, _$[$0].first_column);
break;
case 110:
this.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), false, _$[$0].first_line, _$[$0].first_column);
break;
case 111:
this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\"/g,"\""), _$[$0].first_line, _$[$0].first_column);
break;
case 112:
this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\'/g,"'"), _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:23,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,36:36,37:$V8,39:$V9,42:$Va,46:$Vb,51:27,52:44,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{1:[3]},{2:$V0,5:[1,53],6:23,9:54,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,36:36,37:$V8,39:$V9,42:$Va,46:$Vb,51:27,52:44,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{1:[2,2]},o($Vq,[2,6]),o($Vq,[2,7]),{8:[1,55]},{8:[1,56]},o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vr,$Vs,{8:[1,57]}),o($Vq,[2,19]),o($Vr,$Vt,{8:[1,58]}),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),{8:[1,59]},o($Vq,[2,25]),{32:60,59:$Vu},{38:62,41:64,42:[1,63]},{38:65,41:64,42:[1,66]},o([8,60],[2,48],{40:[1,67]}),{32:68,59:$Vu},{32:69,59:$Vu},{47:$Vv,56:70},{59:[1,72]},{21:74,23:75,36:73,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{8:[1,77]},{8:[1,78]},{8:[1,80],21:74,23:75,36:79,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},{42:[1,96]},o($Vr,$VM,{45:$VN,53:$VO,54:$VP,59:$VQ}),{42:[1,101]},o($Vq,[2,27]),o($Vq,[2,28]),{8:[2,26]},{7:[1,102],8:[1,103]},o($VR,[2,50]),{21:74,23:75,36:104,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:105,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VS,[2,108]),o($VS,[2,109]),o($VS,[2,110]),o($VS,[2,111]),o($VS,[2,112]),{21:74,23:75,36:106,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{1:[2,1]},o($Vq,[2,5]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,18]),o($Vq,[2,20]),o($Vq,[2,24]),{8:[1,107]},{21:74,23:75,36:108,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{8:[2,34],40:$VT},o($VU,$VV,{43:[1,110],45:$VW}),o($VU,[2,37]),{8:[2,35],40:$VT},o($VU,$VV,{43:[1,112],45:$VW}),{42:$VX,52:113},{47:$Vv,56:115},{47:$Vv,56:116},{62:[1,117]},{2:$V0,4:118,6:23,7:[1,119],9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,36:36,37:$V8,39:$V9,42:$Va,46:$Vb,51:27,52:44,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{11:120,12:121,37:[1,122],39:[1,123],42:$VX,51:27,52:44},{47:[1,124],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},o($VS,$Vs),o($VS,$Vt),o($VS,$VM,{59:$VQ}),o($Vq,[2,30]),o($Vq,[2,31]),{8:[1,125],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},o($Vq,[2,33]),{21:74,23:75,36:126,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:127,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:128,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:129,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:130,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:131,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:132,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:133,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:134,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:135,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:136,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:137,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:138,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:139,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:140,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{59:[1,142],72:141},{21:74,23:75,36:145,42:$Vw,59:$Vd,60:[1,144],74:143,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:146,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VR,[2,52]),o($VR,[2,53]),{45:[1,147]},o($Vq,[2,3]),o($Vq,[2,4]),o($VS,[2,90]),o($VS,[2,103]),{60:[1,148],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},o($Vq,[2,29]),{60:[1,149],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},{41:150,42:$VY},{42:[1,152],44:153,75:$VZ,76:$V_,77:$V$,78:$V01},{21:74,23:75,36:158,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{42:[1,159],44:153,75:$VZ,76:$V_,77:$V$,78:$V01},o($VR,[2,49]),{45:$VN,53:$VO,54:$VP},o($Vq,[2,57],{57:160,61:162,58:[1,161]}),o($Vq,[2,64]),{32:163,59:$Vu},{2:$V0,6:23,7:[1,164],9:54,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,36:36,37:$V8,39:$V9,42:$Va,46:$Vb,51:27,52:44,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($V11,[2,60]),{8:[1,165]},{8:[1,166]},{38:62,41:64,42:$VY},{38:65,41:64,42:$VY},{7:[1,168],65:167,66:169,67:$V21,68:$V31},o($Vq,[2,32]),{43:[1,172],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},o($V41,[2,91],{81:$VA,82:$VB,83:$VC,84:$VD}),o($V41,[2,92],{81:$VA,82:$VB,83:$VC,84:$VD}),o($V51,[2,93],{83:$VC,84:$VD}),o($V51,[2,94],{83:$VC,84:$VD}),o($VS,[2,95]),o($VS,[2,96]),o($V61,[2,97],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD}),o($V61,[2,98],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD}),o($V61,[2,99],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD}),o($V61,[2,100],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD}),o($V71,[2,101],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($V71,[2,102],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o([7,8,40,43,47,60,69,92],[2,104],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,93:$VL}),o([7,8,40,43,47,60,69,92,93],[2,105],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),{43:[1,173],47:$Vv,56:174},{42:$V81,48:175,60:[1,176],73:177},{40:[1,180],60:[1,179]},o($VS,[2,83]),o($V91,[2,85],{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),o($VR,[2,51],{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),{47:[1,181]},o($VS,[2,114]),o([8,47],[2,58]),o($VU,[2,36]),o($VU,$VV,{43:[1,182],45:$VW}),{45:[1,183]},o($VU,[2,39],{45:[1,184]}),o($Va1,[2,86]),o($Va1,[2,87]),o($Va1,[2,88]),o($Va1,[2,89]),o($VU,[2,40],{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),{45:[1,185]},o($Vq,[2,55],{61:187,58:[1,186]}),{47:$Vv,55:$Vb1,56:188},o($V11,[2,62]),{8:[1,190]},o($V11,[2,59]),{21:74,23:75,36:191,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{21:74,23:75,36:192,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{7:[1,193],66:194,67:$V21,68:$V31},o($Vq,[2,67]),o($Vc1,[2,69]),{21:74,23:75,36:195,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{43:[1,196]},{21:74,23:75,36:197,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{44:198,75:$VZ,76:$V_,77:$V$,78:$V01},o($Vq,[2,76]),{40:$Vd1,60:[1,199]},o($Ve1,[2,78]),o($Vf1,[2,80]),{43:[1,201]},o($VS,[2,82]),{21:74,23:75,36:202,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{42:$V81,48:203,73:177},{44:153,75:$VZ,76:$V_,77:$V$,78:$V01},{47:[1,204]},{21:74,23:75,36:205,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{47:[1,206]},{47:$Vv,55:$Vb1,56:207},o($V11,[2,61]),o($Vq,[2,56]),{32:208,59:$Vu},o($Vq,[2,65]),{8:[1,209],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},{8:[1,210],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},o($Vq,[2,66]),o($Vc1,[2,68]),{43:[1,211],69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL},{2:$V0,4:212,6:23,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,36:36,37:$V8,39:$V9,42:$Va,46:$Vb,51:27,52:44,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o([7,8,40,43,47,60,69],[2,72],{79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),{47:$Vv,56:213},o($Ve1,[2,77]),{42:$V81,73:214},{44:215,75:$VZ,76:$V_,77:$V$,78:$V01},o($V91,[2,84],{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),{7:[1,216],40:$Vd1},{42:$Vg1,49:217,50:218},o($VU,[2,38],{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),{42:$Vg1,49:220,50:218},o($Vq,[2,54]),{47:$Vv,56:221},{12:222,42:$VX,51:27,52:44},{12:223,42:$VX,51:27,52:44},{2:$V0,4:224,6:23,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,36:36,37:$V8,39:$V9,42:$Va,46:$Vb,51:27,52:44,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($Vc1,[2,71],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,6:23,51:27,36:36,52:44,9:54,2:$V0,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:$V9,42:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp}),o($Vq,[2,75]),o($Vf1,[2,79]),o($Vf1,[2,81]),{8:[1,225]},{7:[1,226],40:$Vh1},o($Vi1,[2,46]),{43:[1,228]},{7:[1,229],40:$Vh1},o($V11,[2,63]),{60:[1,230]},{60:[1,231]},o($Vc1,[2,70],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,6:23,51:27,36:36,52:44,9:54,2:$V0,28:$V1,29:$V2,30:$V3,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:$V9,42:$Va,46:$Vb,55:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,70:$Vh,71:$Vi,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp}),o($Vq,[2,42]),{8:[1,232]},{42:$Vg1,50:233},{21:74,23:75,36:234,42:$Vw,59:$Vd,79:$Vj,91:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{8:[1,235]},{47:$Vv,56:236},{47:$Vv,56:237},o($Vq,[2,43]),o($Vi1,[2,45]),o($Vi1,[2,47],{69:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,92:$VK,93:$VL}),o($Vq,[2,44]),o($Vq,[2,73]),o($Vq,[2,74])],
defaultActions: {3:[2,2],42:[2,26],53:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Carpeta AST
    var {AST} = require("./AST/AST");
    var {Error} = require("./AST/Error");
    var {NodoAST} = require("./AST/NodoAST");
    var {Simbolo} = require("./AST/Simbolo");
    var {Tabla} = require("./AST/Tabla");
    var {Tipo,Tipos} = require("./AST/Tipo");
    

    //Carpeta Expresion
    var {Aritmetica} = require("./Expresion/Aritmetica");
    var {Primitivo} = require("./Expresion/Primitivo");
    var {Identificador} = require("./Expresion/Identificador");
    var {Relacional} = require("./Expresion/Relacional");
    var {Logica} = require("./Expresion/Logica");
    var {Continue} = require("./Expresion/Continue");
    var {Break} = require("./Expresion/Break");
    var {Return} = require("./Expresion/Return");
    
    
    //Carpeta Instruccion
    var {ConsoleLog} = require("./Instruccion/ConsoleLog");
    var {Declaracion} = require("./Instruccion/Declaracion");
    var {Asignacion} = require("./Instruccion/Asignacion");
    var {If} = require("./Instruccion/If");
    var {While} = require("./Instruccion/While");
    var {DoWhile} = require("./Instruccion/DoWhile");
    var {For} = require("./Instruccion/For");
    var {Switch} = require("./Instruccion/Switch");
    var {Case} = require("./Instruccion/Case");
    var {Ternario} = require("./Instruccion/Ternario");
    var {Funcion} = require("./Instruccion/Funcion");
    var {UsoFuncion} = require("./Instruccion/UsoFuncion");
    var {graficar_ts} = require("./Instruccion/graficar_ts");
    var {Type} = require("./Instruccion/Type");
    var {TypeDeclaracion} = require("./Instruccion/TypeDeclaracion");


    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 29;
break;
case 1:return 30;
break;
case 2:return 75;
break;
case 3:return 77;
break;
case 4:return 76;
break;
case 5:return 78;
break;
case 6:return 'TK_ARRAY';
break;
case 7:return 46;
break;
case 8:return 53;
break;
case 9:return 54;
break;
case 10:return 83;
break;
case 11:return 80;
break;
case 12:return 79;
break;
case 13:return 81;
break;
case 14:return 82;
break;
case 15:return 84;
break;
case 16:return 89;
break;
case 17:return 90;
break;
case 18:return 87;
break;
case 19:return 86;
break;
case 20:return 88;
break;
case 21:return 85;
break;
case 22:return 93;
break;
case 23:return 92;
break;
case 24:return 91;
break;
case 25:return 59;
break;
case 26:return 60;
break;
case 27:return 47;
break;
case 28:return 7;
break;
case 29:return 8;
break;
case 30:return 43;
break;
case 31:return 40;
break;
case 32:return 45;
break;
case 33:return '.';
break;
case 34:return 69;
break;
case 35:return 71;
break;
case 36:return 55;
break;
case 37:return 58;
break;
case 38:return 64;
break;
case 39:return 67;
break;
case 40:return 63;
break;
case 41:return 62;
break;
case 42:return 70;
break;
case 43:return 'TK_IN';
break;
case 44:return 'TK_OF';
break;
case 45:return 34;
break;
case 46:return 35;
break;
case 47:return 33;
break;
case 48:return 68;
break;
case 49:return 'TK_PUSH';
break;
case 50:return 'TK_POP';
break;
case 51:return 'TK_LENGTH';
break;
case 52:return 39;
break;
case 53:return 37;
break;
case 54:return 31;
break;
case 55:return 28;
break;
case 56:return 95;
break;
case 57:return 96;
break;
case 58:return 97;
break;
case 59:return 42;
break;
case 60:return 94;
break;
case 61:return 98;
break;
case 62:
break;
case 63:errores.push(new Error("Lexico", yy_.yytext+" No pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\*(\*|\/|[^"*/"])*\*\/)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:Array\b)/,/^(?:type\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:\?)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"((\\")?|[^\"])*")/,/^(?:[A-Za-z"_"][A-Za-z"_"0-9]*)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'((\\')|[^"'"])*')/,/^(?:[ \r\t\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}