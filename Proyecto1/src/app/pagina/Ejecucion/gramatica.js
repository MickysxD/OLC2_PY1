/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,26],$V2=[1,27],$V3=[1,18],$V4=[1,19],$V5=[1,38],$V6=[1,21],$V7=[1,39],$V8=[1,22],$V9=[1,23],$Va=[1,25],$Vb=[1,24],$Vc=[1,29],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[5,7,22,24,25,26,28,31,40,44,48,49,50,53,54,56,57,64,76,79,80,81,82,83],$Vl=[55,64,65,66,67,68,69,70,71,72,73,74,75,77,78],$Vm=[2,81],$Vn=[1,46],$Vo=[1,49],$Vp=[1,55],$Vq=[1,59],$Vr=[1,62],$Vs=[1,64],$Vt=[1,63],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[8,29,45],$VH=[8,29,32,45,46,55,64,65,66,67,68,69,70,71,72,73,74,75,77,78],$VI=[2,87],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,86],$VN=[8,29],$VO=[1,90],$VP=[1,120],$VQ=[1,121],$VR=[1,122],$VS=[1,123],$VT=[5,7,22,24,25,26,28,31,40,43,44,48,49,50,53,54,56,57,64,76,79,80,81,82,83],$VU=[1,134],$VV=[1,135],$VW=[8,29,32,45,46,55,64,65,70,71,72,73,74,75,77,78],$VX=[8,29,32,45,46,55,64,65,66,67,70,71,72,73,74,75,77,78],$VY=[8,29,32,45,46,55,70,71,72,73,74,75,77,78],$VZ=[8,29,32,45,46,55,74,75,77,78],$V_=[1,139],$V$=[8,29,34,45,46],$V01=[1,144],$V11=[7,53,54],$V21=[29,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"ERROR":6,"}":7,";":8,"INSTRUCCION":9,"CONSOLE":10,"DECLARACION":11,"ASIGNACION":12,"IF":13,"WHILE":14,"DOWHILE":15,"FOR":16,"SWITCH":17,"BREAK":18,"CONTINUE":19,"TERNARIO":20,"FUNCION":21,"TK_CONSOLE":22,"CONDICION":23,"TK_BREAK":24,"TK_CONTINUE":25,"TK_CONST":26,"LISTA_DECLARACION":27,"TK_LET":28,",":29,"ID_DECLARACION":30,"TK_ID":31,":":32,"TIPO":33,"=":34,"EXPRESION":35,"LISTA_ASIGNACION":36,"ID_ASIGNACION":37,"++":38,"--":39,"TK_IF":40,"BLOQUE_INSTRUCCIONES":41,"LISTA_IF":42,"TK_ELSE":43,"(":44,")":45,"{":46,"ELSE_IF":47,"TK_WHILE":48,"TK_DO":49,"TK_SWITCH":50,"LISTA_CASE":51,"CASE":52,"TK_CASE":53,"TK_DEFAULT":54,"?":55,"TK_FOR":56,"TK_FUNCTION":57,"LISTA_PARAMETROS":58,"PARAMETRO":59,"TK_STRING":60,"TK_BOOLEAN":61,"TK_NUMBER":62,"TK_VOID":63,"-":64,"+":65,"*":66,"/":67,"^":68,"%":69,"<":70,">":71,">=":72,"<=":73,"==":74,"!=":75,"!":76,"||":77,"&&":78,"TK_NUMERO":79,"TK_TRUE":80,"TK_FALSE":81,"TK_CADENAC":82,"TK_CADENAS":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"}",8:";",22:"TK_CONSOLE",24:"TK_BREAK",25:"TK_CONTINUE",26:"TK_CONST",28:"TK_LET",29:",",31:"TK_ID",32:":",34:"=",38:"++",39:"--",40:"TK_IF",43:"TK_ELSE",44:"(",45:")",46:"{",48:"TK_WHILE",49:"TK_DO",50:"TK_SWITCH",53:"TK_CASE",54:"TK_DEFAULT",55:"?",56:"TK_FOR",57:"TK_FUNCTION",60:"TK_STRING",61:"TK_BOOLEAN",62:"TK_NUMBER",63:"TK_VOID",64:"-",65:"+",66:"*",67:"/",68:"^",69:"%",70:"<",71:">",72:">=",73:"<=",74:"==",75:"!=",76:"!",77:"||",78:"&&",79:"TK_NUMERO",80:"TK_TRUE",81:"TK_FALSE",82:"TK_CADENAC",83:"TK_CADENAS"},
productions_: [0,[3,2],[3,1],[6,2],[6,2],[4,2],[4,1],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[10,3],[18,2],[19,2],[11,2],[11,2],[27,3],[27,1],[30,5],[30,3],[30,3],[30,1],[12,1],[36,3],[36,1],[37,3],[37,2],[37,2],[13,6],[13,4],[13,5],[13,3],[23,3],[41,3],[41,2],[42,2],[42,1],[47,4],[14,3],[15,5],[17,5],[51,2],[51,1],[52,4],[52,3],[20,5],[16,9],[16,9],[21,10],[21,8],[58,3],[58,1],[59,3],[33,1],[33,1],[33,1],[33,1],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new AST($$[$0-1], errores); errores = []; return this.$;
break;
case 2:
this.$ = new AST([], errores); errores = []; return this.$;
break;
case 3: case 4:
errores.push(new Error("Sintactico", "Recuperado en: " + $$[$0-1].yyreport_syntax_error + $$[$0-1], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
 this.$ = $$[$0-1];
                                            if($$[$0] instanceof NodoAST){
                                                this.$ = $$[$0-1]; this.$.push($$[$0]);
                                            }
                                          
break;
case 6:
 if($$[$0] instanceof NodoAST){
                                                this.$ = [$$[$0]];
                                            }else{
                                                this.$ = [];
                                            }
                                          
break;
case 7: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 18: case 81:
this.$ = $$[$0];
break;
case 8: case 9: case 17: case 40: case 41: case 88:
this.$ = $$[$0-1];
break;
case 19:
this.$ = new ConsoleLog($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 20:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 21:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 22:
this.$ = new Declaracion(true, $$[$0]);
break;
case 23:
this.$ = new Declaracion(false, $$[$0]);
break;
case 24: case 58:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 25: case 32: case 44: case 50: case 59:
this.$ = [$$[$0]];
break;
case 26:
this.$ = new Identificador($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 27: case 60:
this.$ = new Identificador($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28: case 33:
this.$ = new Identificador($$[$0-2], null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29: case 87:
this.$ = new Identificador($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 30:
this.$ = new Asignacion($$[$0]);
break;
case 31:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 34:
this.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '+', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 35:
this.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '-', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 36:
this.$ = new If($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 37:
this.$ = new If($$[$0-2], $$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 38:
this.$ = new If($$[$0-3], $$[$0-2], null, $$[$01], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 39:
this.$ = new If($$[$0-1], $$[$0], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 42:
this.$ = [];
break;
case 43:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 45:
this.$ = new If($$[$0-1], $$[$0], null, null, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 46:
this.$ = new While($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 47:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 48:
this.$ = new Switch($$[$0-3], $$[$0-1], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 49:
this.$ = $$[$0-1]; this.$.push($$[$0])
break;
case 51:
this.$ = new Case(false, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 52:
this.$ = new Case(true, null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 53:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 54:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 55:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 56:
this.$ = new Funcion($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 57:
this.$ = new Funcion($$[$0-6], $$[$0-4], new Tipo(Tipos.VOID), $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 61:
this.$ = new Tipo(Tipos.STRING);
break;
case 62:
this.$ = new Tipo(Tipos.BOOLEAN);
break;
case 63:
this.$ = new Tipo(Tipos.NUMBER);
break;
case 64:
this.$ = new Tipo(Tipos.VOID);
break;
case 65:
this.$ = new Aritmetica($$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$ = new Logica($$[$0], null, '!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 79:
this.$ = new Logica($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$ = new Logica($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$ = new Primitivo(new Tipo(Tipos.NUMBER), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 83:
this.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), true, _$[$0].first_line, _$[$0].first_column);
break;
case 84:
this.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), false, _$[$0].first_line, _$[$0].first_column);
break;
case 85:
this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\"/g,"\""), _$[$0].first_line, _$[$0].first_column);
break;
case 86:
this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\'/g,"'"), _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{3:1,4:2,5:[1,3],9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{1:[3]},{5:[1,40],9:41,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{1:[2,2]},o($Vk,[2,6]),o($Vk,[2,7]),{8:[1,42]},{8:[1,43]},o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vl,$Vm,{8:[1,44]}),o($Vk,[2,18]),{23:45,44:$Vn},{27:47,30:48,31:$Vo},{27:50,30:48,31:$Vo},o([8,45],[2,30],{29:[1,51]}),{23:52,44:$Vn},{23:53,44:$Vn},{41:54,46:$Vp},{44:[1,56]},{20:58,31:$Vq,35:57,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{8:[1,60]},{8:[1,61]},{55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},{31:[1,77]},o($VG,[2,32]),{20:58,31:$Vq,35:78,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:79,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($VH,[2,82]),o($VH,[2,83]),o($VH,[2,84]),o($VH,[2,85]),o($VH,[2,86]),o($Vl,$VI,{34:$VJ,38:$VK,39:$VL}),{20:58,31:$Vq,35:83,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{1:[2,1]},o($Vk,[2,5]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,17]),{8:[1,84]},{20:58,31:$Vq,35:85,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{8:[2,22],29:$VM},o($VN,[2,25]),o($VN,[2,29],{32:[1,87],34:[1,88]}),{8:[2,23],29:$VM},{31:$VO,37:89},{41:91,46:$Vp},{41:92,46:$Vp},{48:[1,93]},{4:94,7:[1,95],9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{11:96,12:97,26:$V3,28:$V4,31:$VO,36:20,37:30},{46:[1,98],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},o($VH,$Vm),o($VH,$VI),o($Vk,[2,20]),o($Vk,[2,21]),{20:58,31:$Vq,35:99,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:100,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:101,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:102,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:103,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:104,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:105,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:106,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:107,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:108,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:109,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:110,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:111,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:112,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:113,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{44:[1,114]},o($VH,[2,65]),o($VH,[2,78]),{20:58,31:$Vq,35:115,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($VG,[2,34]),o($VG,[2,35]),{45:[1,116],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},o($Vk,[2,19]),{45:[1,117],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},{30:118,31:$Vo},{33:119,60:$VP,61:$VQ,62:$VR,63:$VS},{20:58,31:$Vq,35:124,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($VG,[2,31]),{34:$VJ,38:$VK,39:$VL},o($Vk,[2,39],{42:125,47:127,43:[1,126]}),o($Vk,[2,46]),{23:128,44:$Vn},{7:[1,129],9:41,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($VT,[2,42]),{8:[1,130]},{8:[1,131]},{51:132,52:133,53:$VU,54:$VV},{32:[1,136],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},o($VW,[2,66],{66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VW,[2,67],{66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VX,[2,68],{68:$Vw,69:$Vx}),o($VX,[2,69],{68:$Vw,69:$Vx}),o($VH,[2,70]),o($VH,[2,71]),o($VY,[2,72],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VY,[2,73],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VY,[2,74],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VY,[2,75],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx}),o($VZ,[2,76],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o($VZ,[2,77],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB}),o([8,29,32,45,46,55,77],[2,79],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,78:$VF}),o([8,29,32,45,46,55,77,78],[2,80],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD}),{31:$V_,58:137,59:138},o($VG,[2,33],{55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF}),o($VH,[2,88]),o([8,46],[2,40]),o($VN,[2,24]),o($VN,[2,27],{34:[1,140]}),o($V$,[2,61]),o($V$,[2,62]),o($V$,[2,63]),o($V$,[2,64]),o($VN,[2,28],{55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF}),o($Vk,[2,37],{47:142,43:[1,141]}),{40:$V01,41:143,46:$Vp},o($VT,[2,44]),{8:[1,145]},o($VT,[2,41]),{20:58,31:$Vq,35:146,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{20:58,31:$Vq,35:147,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{7:[1,148],52:149,53:$VU,54:$VV},o($V11,[2,50]),{20:58,31:$Vq,35:150,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{32:[1,151]},{20:58,31:$Vq,35:152,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{29:[1,154],45:[1,153]},o($V21,[2,59]),{32:[1,155]},{20:58,31:$Vq,35:156,44:$V7,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{40:$V01,41:157,46:$Vp},o($VT,[2,43]),o($Vk,[2,38]),{23:158,44:$Vn},o($Vk,[2,47]),{8:[1,159],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},{8:[1,160],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},o($Vk,[2,48]),o($V11,[2,49]),{32:[1,161],55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF},{4:162,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o([8,29,32,45,46,55],[2,53],{64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF}),{32:[1,163],46:[1,164]},{31:$V_,59:165},{33:166,60:$VP,61:$VQ,62:$VR,63:$VS},o($VN,[2,26],{55:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,77:$VE,78:$VF}),o($Vk,[2,36]),{41:167,46:$Vp},{12:168,31:$VO,36:20,37:30},{12:169,31:$VO,36:20,37:30},{4:170,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($V11,[2,52],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,36:20,35:28,37:30,9:41,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj}),{33:171,60:$VP,61:$VQ,62:$VR,63:$VS},{4:172,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($V21,[2,58]),o($V21,[2,60]),o($VT,[2,45]),{45:[1,173]},{45:[1,174]},o($V11,[2,51],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,36:20,35:28,37:30,9:41,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj}),{46:[1,175]},{7:[1,176],9:41,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},{41:177,46:$Vp},{41:178,46:$Vp},{4:179,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($Vk,[2,57]),o($Vk,[2,54]),o($Vk,[2,55]),{7:[1,180],9:41,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,24:$V1,25:$V2,26:$V3,28:$V4,31:$V5,35:28,36:20,37:30,40:$V6,44:$V7,48:$V8,49:$V9,50:$Va,56:$Vb,57:$Vc,64:$Vd,76:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj},o($Vk,[2,56])],
defaultActions: {3:[2,2],40:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Carpeta AST
    var {AST} = require("./AST/AST");
    var {Error} = require("./AST/Error");
    var {NodoAST} = require("./AST/NodoAST");
    var {Simbolo} = require("./AST/Simbolo");
    var {Tabla} = require("./AST/Tabla");
    var {Tipo,Tipos} = require("./AST/Tipo");
    

    //Carpeta Expresion
    var {Aritmetica} = require("./Expresion/Aritmetica");
    var {Primitivo} = require("./Expresion/Primitivo");
    var {Identificador} = require("./Expresion/Identificador");
    var {Relacional} = require("./Expresion/Relacional");
    var {Logica} = require("./Expresion/Logica");
    var {Continue} = require("./Expresion/Continue");
    var {Break} = require("./Expresion/Break");
    
    
    //Carpeta Instruccion
    var {ConsoleLog} = require("./Instruccion/ConsoleLog");
    var {Declaracion} = require("./Instruccion/Declaracion");
    var {Asignacion} = require("./Instruccion/Asignacion");
    var {If} = require("./Instruccion/If");
    var {While} = require("./Instruccion/While");
    var {DoWhile} = require("./Instruccion/DoWhile");
    var {For} = require("./Instruccion/For");
    var {Switch} = require("./Instruccion/Switch");
    var {Case} = require("./Instruccion/Case");
    var {Ternario} = require("./Instruccion/Ternario");
    var {Funcion} = require("./Instruccion/Funcion");


    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'TK_CL';
break;
case 1:return 'TK_CM';
break;
case 2:return 60;
break;
case 3:return 62;
break;
case 4:return 61;
break;
case 5:return 63;
break;
case 6:return 'TK_ARRAY';
break;
case 7:return 'TK_ARRAY';
break;
case 8:return 38;
break;
case 9:return 39;
break;
case 10:return 65;
break;
case 11:return 64;
break;
case 12:return 66;
break;
case 13:return 67;
break;
case 14:return 68;
break;
case 15:return 69;
break;
case 16:return 74;
break;
case 17:return 75;
break;
case 18:return 72;
break;
case 19:return 71;
break;
case 20:return 73;
break;
case 21:return 70;
break;
case 22:return 78;
break;
case 23:return 77;
break;
case 24:return 76;
break;
case 25:return 44;
break;
case 26:return 45;
break;
case 27:return 46;
break;
case 28:return 7;
break;
case 29:return 8;
break;
case 30:return 32;
break;
case 31:return 29;
break;
case 32:return 34;
break;
case 33:return '.';
break;
case 34:return 55;
break;
case 35:return 57;
break;
case 36:return 40;
break;
case 37:return 43;
break;
case 38:return 50;
break;
case 39:return 53;
break;
case 40:return 49;
break;
case 41:return 48;
break;
case 42:return 56;
break;
case 43:return 'TK_IN';
break;
case 44:return 'TK_OF';
break;
case 45:return 25;
break;
case 46:return 'TK_RETURN';
break;
case 47:return 24;
break;
case 48:return 54;
break;
case 49:return 'TK_PUSH';
break;
case 50:return 'TK_POP';
break;
case 51:return 'TK_LENGTH';
break;
case 52:return 28;
break;
case 53:return 26;
break;
case 54:return 22;
break;
case 55:return 'TK_GRAFICAR';
break;
case 56:return 80;
break;
case 57:return 81;
break;
case 58:return 82;
break;
case 59:return 31;
break;
case 60:return 79;
break;
case 61:return 83;
break;
case 62:
break;
case 63:errores.push(new Error("Lexico", yy_.yytext+" No pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\*(\*|\/|[^"*/"])*\*\/)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:Array\b)/,/^(?:type\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:\?)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"((\\")?|[^\"])*")/,/^(?:[A-Za-z"_"][A-Za-z"_"0-9]*)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'((\\')|[^"'"])*')/,/^(?:[ \r\t\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}