/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,40],$V1=[1,39],$V2=[1,37],$V3=[1,38],$V4=[1,22],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,23],$V9=[1,24],$Va=[1,36],$Vb=[1,26],$Vc=[1,49],$Vd=[1,27],$Ve=[1,28],$Vf=[1,30],$Vg=[1,29],$Vh=[1,35],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[2,5,7,26,27,28,29,31,32,33,35,37,40,48,52,56,57,58,61,62,64,65,74,86,89,90,91,92,93],$Vq=[63,74,75,76,77,78,79,80,81,82,83,84,85,87,88],$Vr=[2,98],$Vs=[2,99],$Vt=[1,58],$Vu=[1,61],$Vv=[1,67],$Vw=[1,72],$Vx=[1,77],$Vy=[1,79],$Vz=[1,78],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,89],$VK=[1,90],$VL=[1,91],$VM=[2,105],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,93],$VR=[8,38,53],$VS=[8,38,41,53,54,63,74,75,76,77,78,79,80,81,82,83,84,85,87,88],$VT=[1,104],$VU=[8,38],$VV=[1,108],$VW=[1,143],$VX=[1,144],$VY=[1,145],$VZ=[1,146],$V_=[2,5,7,26,27,28,29,31,32,33,35,37,40,48,51,52,56,57,58,61,62,64,65,74,86,89,90,91,92,93],$V$=[1,158],$V01=[1,159],$V11=[8,38,41,53,54,63,74,75,80,81,82,83,84,85,87,88],$V21=[8,38,41,53,54,63,74,75,76,77,80,81,82,83,84,85,87,88],$V31=[8,38,41,53,54,63,80,81,82,83,84,85,87,88],$V41=[8,38,41,53,54,63,84,85,87,88],$V51=[1,166],$V61=[38,53],$V71=[8,38,43,53,54],$V81=[1,173],$V91=[7,61,62],$Va1=[41,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"ERROR":6,"}":7,";":8,"INSTRUCCION":9,"CONSOLE":10,"DECLARACION":11,"ASIGNACION":12,"IF":13,"WHILE":14,"DOWHILE":15,"FOR":16,"SWITCH":17,"BREAK":18,"CONTINUE":19,"RETURN":20,"TERNARIO":21,"FUNCION":22,"USOFUNCION":23,"COMENTARIO":24,"GRAFICAR":25,"TK_GRAFICAR":26,"TK_CL":27,"TK_CM":28,"TK_CONSOLE":29,"CONDICION":30,"TK_BREAK":31,"TK_CONTINUE":32,"TK_RETURN":33,"EXPRESION":34,"TK_CONST":35,"LISTA_DECLARACION":36,"TK_LET":37,",":38,"ID_DECLARACION":39,"TK_ID":40,":":41,"TIPO":42,"=":43,"LISTA_ASIGNACION":44,"ID_ASIGNACION":45,"++":46,"--":47,"TK_IF":48,"BLOQUE_INSTRUCCIONES":49,"LISTA_IF":50,"TK_ELSE":51,"(":52,")":53,"{":54,"ELSE_IF":55,"TK_WHILE":56,"TK_DO":57,"TK_SWITCH":58,"LISTA_CASE":59,"CASE":60,"TK_CASE":61,"TK_DEFAULT":62,"?":63,"TK_FOR":64,"TK_FUNCTION":65,"PFUNCION":66,"LISTA_PARAMETROS":67,"PARAMETRO":68,"LISTA_IDS":69,"TK_STRING":70,"TK_BOOLEAN":71,"TK_NUMBER":72,"TK_VOID":73,"-":74,"+":75,"*":76,"/":77,"^":78,"%":79,"<":80,">":81,">=":82,"<=":83,"==":84,"!=":85,"!":86,"||":87,"&&":88,"TK_NUMERO":89,"TK_TRUE":90,"TK_FALSE":91,"TK_CADENAC":92,"TK_CADENAS":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"}",8:";",26:"TK_GRAFICAR",27:"TK_CL",28:"TK_CM",29:"TK_CONSOLE",31:"TK_BREAK",32:"TK_CONTINUE",33:"TK_RETURN",35:"TK_CONST",37:"TK_LET",38:",",40:"TK_ID",41:":",43:"=",46:"++",47:"--",48:"TK_IF",51:"TK_ELSE",52:"(",53:")",54:"{",56:"TK_WHILE",57:"TK_DO",58:"TK_SWITCH",61:"TK_CASE",62:"TK_DEFAULT",63:"?",64:"TK_FOR",65:"TK_FUNCTION",70:"TK_STRING",71:"TK_BOOLEAN",72:"TK_NUMBER",73:"TK_VOID",74:"-",75:"+",76:"*",77:"/",78:"^",79:"%",80:"<",81:">",82:">=",83:"<=",84:"==",85:"!=",86:"!",87:"||",88:"&&",89:"TK_NUMERO",90:"TK_TRUE",91:"TK_FALSE",92:"TK_CADENAC",93:"TK_CADENAS"},
productions_: [0,[3,2],[3,1],[6,2],[6,2],[4,2],[4,1],[9,1],[9,2],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,2],[9,1],[9,2],[9,1],[25,1],[24,1],[24,1],[10,3],[18,2],[19,2],[20,3],[20,2],[11,2],[11,2],[36,3],[36,1],[39,5],[39,3],[39,3],[39,1],[12,1],[44,3],[44,1],[45,3],[45,2],[45,2],[13,6],[13,4],[13,5],[13,3],[30,3],[49,3],[49,2],[50,2],[50,1],[55,4],[14,3],[15,5],[17,5],[17,4],[59,2],[59,1],[60,4],[60,3],[21,5],[16,9],[16,9],[22,6],[22,4],[66,3],[66,2],[67,3],[67,1],[68,3],[23,4],[23,3],[69,3],[69,1],[42,1],[42,1],[42,1],[42,1],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new AST($$[$0-1], errores); errores = []; return this.$;
break;
case 2:
this.$ = new AST([], errores); errores = []; return this.$;
break;
case 3: case 4:
errores.push(new Error("Sintactico", "Recuperado en: " + $$[$0-1].yyreport_syntax_error + $$[$0-1], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
 this.$ = $$[$0-1];
                                            if($$[$0] instanceof NodoAST){
                                                this.$ = $$[$0-1]; this.$.push($$[$0]);
                                            }
                                          
break;
case 6:
 if($$[$0] instanceof NodoAST){
                                                this.$ = [$$[$0]];
                                            }else{
                                                this.$ = [];
                                            }
                                          
break;
case 7: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 19: case 23: case 98: case 99:
this.$ = $$[$0];
break;
case 8: case 9: case 18: case 20: case 50: case 51: case 69: case 106:
this.$ = $$[$0-1];
break;
case 22:
this.$ =$$[$0-1];
break;
case 24:
this.$ = new graficar_ts(_$[$0].first_line, _$[$0].first_column);
break;
case 27:
this.$ = new ConsoleLog($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 29:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 30:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 31:
this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 32:
this.$ = new Declaracion(true, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 33:
this.$ = new Declaracion(false, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 34: case 71: case 76:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 35: case 42: case 54: case 61: case 72: case 77:
this.$ = [$$[$0]];
break;
case 36:
this.$ = new Identificador($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 37: case 73:
this.$ = new Identificador($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 38: case 43:
this.$ = new Identificador($$[$0-2], null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 39: case 105:
this.$ = new Identificador($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 40:
this.$ = new Asignacion($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 41:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 44:
this.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '+', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 45:
this.$ = new Identificador($$[$0-1], null,  new Aritmetica(new Identificador($$[$0-1], null, null, _$[$0-1].first_line, _$[$0-1].first_column), new Primitivo(new Tipo(Tipos.NUMBER), Number(1), _$[$0].first_line, _$[$0].first_column), '-', _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 46:
this.$ = new If($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 47:
this.$ = new If($$[$0-2], $$[$0-1], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 48:
this.$ = new If($$[$0-3], $$[$0-2], [], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 49:
this.$ = new If($$[$0-1], $$[$0], [], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 52: case 70:
this.$ = [];
break;
case 53:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 55:
this.$ = new If($$[$0-1], $$[$0], [], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56:
this.$ = new While($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 57:
this.$ = new DoWhile($$[$0-1], $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 58:
this.$ = new Switch($$[$0-3], $$[$0-1], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 59:
this.$ = new Switch($$[$0-2], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 60:
this.$ = $$[$0-1]; this.$.push($$[$0])
break;
case 62:
this.$ = new Case(false, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 63:
this.$ = new Case(true, null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 65: case 66:
this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 67:
this.$ = new Funcion($$[$0-4], $$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 68:
this.$ = new Funcion($$[$0-2], $$[$0-1], new Tipo(Tipos.VOID), $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 74:
this.$ = new UsoFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 75:
this.$ = new UsoFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$ = new Tipo(Tipos.STRING);
break;
case 79:
this.$ = new Tipo(Tipos.BOOLEAN);
break;
case 80:
this.$ = new Tipo(Tipos.NUMBER);
break;
case 81:
this.$ = new Tipo(Tipos.VOID);
break;
case 82:
this.$ = new Aritmetica($$[$0], null, '-', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 83:
this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 85:
this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94:
this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new Logica($$[$0], null, '!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
this.$ = new Logica($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$ = new Logica($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$ = new Primitivo(new Tipo(Tipos.NUMBER), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 101:
this.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), true, _$[$0].first_line, _$[$0].first_column);
break;
case 102:
this.$ = new Primitivo(new Tipo(Tipos.BOOLEAN), false, _$[$0].first_line, _$[$0].first_column);
break;
case 103:
this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\"/g,"\""), _$[$0].first_line, _$[$0].first_column);
break;
case 104:
this.$ = new Primitivo(new Tipo(Tipos.STRING), $$[$0].slice(1, -1).replace(/\\'/g,"'"), _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:21,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{1:[3]},{2:$V0,5:[1,50],6:21,9:51,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{1:[2,2]},o($Vp,[2,6]),o($Vp,[2,7]),{8:[1,52]},{8:[1,53]},o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vq,$Vr,{8:[1,54]}),o($Vp,[2,19]),o($Vq,$Vs,{8:[1,55]}),o($Vp,[2,21]),{8:[1,56]},o($Vp,[2,23]),{30:57,52:$Vt},{36:59,39:60,40:$Vu},{36:62,39:60,40:$Vu},o([8,53],[2,40],{38:[1,63]}),{30:64,52:$Vt},{30:65,52:$Vt},{49:66,54:$Vv},{52:[1,68]},{21:70,23:71,34:69,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{8:[1,73]},{8:[1,74]},{8:[1,76],21:70,23:71,34:75,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{40:[1,92]},o($Vq,$VM,{43:$VN,46:$VO,47:$VP,52:$VQ}),o($Vp,[2,25]),o($Vp,[2,26]),{8:[2,24]},{7:[1,97],8:[1,98]},o($VR,[2,42]),{21:70,23:71,34:99,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:100,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),{21:70,23:71,34:101,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{1:[2,1]},o($Vp,[2,5]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,18]),o($Vp,[2,20]),o($Vp,[2,22]),{8:[1,102]},{21:70,23:71,34:103,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{8:[2,32],38:$VT},o($VU,[2,35]),o($VU,[2,39],{41:[1,105],43:[1,106]}),{8:[2,33],38:$VT},{40:$VV,45:107},{49:109,54:$Vv},{49:110,54:$Vv},{56:[1,111]},{2:$V0,4:112,6:21,7:[1,113],9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{11:114,12:115,35:$V8,37:$V9,40:$VV,44:25,45:41},{54:[1,116],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($VS,$Vr),o($VS,$Vs),o($VS,$VM,{52:$VQ}),o($Vp,[2,28]),o($Vp,[2,29]),{8:[1,117],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($Vp,[2,31]),{21:70,23:71,34:118,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:119,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:120,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:121,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:122,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:123,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:124,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:125,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:126,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:127,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:128,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:129,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:130,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:131,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:132,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{52:[1,134],66:133},{21:70,23:71,34:137,40:$Vw,52:$Vc,53:[1,136],69:135,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:138,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($VR,[2,44]),o($VR,[2,45]),o($Vp,[2,3]),o($Vp,[2,4]),o($VS,[2,82]),o($VS,[2,95]),{53:[1,139],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($Vp,[2,27]),{53:[1,140],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{39:141,40:$Vu},{42:142,70:$VW,71:$VX,72:$VY,73:$VZ},{21:70,23:71,34:147,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($VR,[2,41]),{43:$VN,46:$VO,47:$VP},o($Vp,[2,49],{50:148,55:150,51:[1,149]}),o($Vp,[2,56]),{30:151,52:$Vt},{2:$V0,6:21,7:[1,152],9:51,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($V_,[2,52]),{8:[1,153]},{8:[1,154]},{7:[1,156],59:155,60:157,61:$V$,62:$V01},o($Vp,[2,30]),{41:[1,160],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($V11,[2,83],{76:$VA,77:$VB,78:$VC,79:$VD}),o($V11,[2,84],{76:$VA,77:$VB,78:$VC,79:$VD}),o($V21,[2,85],{78:$VC,79:$VD}),o($V21,[2,86],{78:$VC,79:$VD}),o($VS,[2,87]),o($VS,[2,88]),o($V31,[2,89],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V31,[2,90],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V31,[2,91],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V31,[2,92],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($V41,[2,93],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o($V41,[2,94],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o([8,38,41,53,54,63,87],[2,96],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,88:$VL}),o([8,38,41,53,54,63,87,88],[2,97],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ}),{41:[1,161],49:162,54:$Vv},{40:$V51,53:[1,164],67:163,68:165},{38:[1,168],53:[1,167]},o($VS,[2,75]),o($V61,[2,77],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($VR,[2,43],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($VS,[2,106]),o([8,54],[2,50]),o($VU,[2,34]),o($VU,[2,37],{43:[1,169]}),o($V71,[2,78]),o($V71,[2,79]),o($V71,[2,80]),o($V71,[2,81]),o($VU,[2,38],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($Vp,[2,47],{55:171,51:[1,170]}),{48:$V81,49:172,54:$Vv},o($V_,[2,54]),{8:[1,174]},o($V_,[2,51]),{21:70,23:71,34:175,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:176,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{7:[1,177],60:178,61:$V$,62:$V01},o($Vp,[2,59]),o($V91,[2,61]),{21:70,23:71,34:179,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{41:[1,180]},{21:70,23:71,34:181,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{42:182,70:$VW,71:$VX,72:$VY,73:$VZ},o($Vp,[2,68]),{38:[1,184],53:[1,183]},o($Va1,[2,70]),o($V61,[2,72]),{41:[1,185]},o($VS,[2,74]),{21:70,23:71,34:186,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{21:70,23:71,34:187,40:$Vw,52:$Vc,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},{48:$V81,49:188,54:$Vv},o($V_,[2,53]),o($Vp,[2,48]),{30:189,52:$Vt},o($Vp,[2,57]),{8:[1,190],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{8:[1,191],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},o($Vp,[2,58]),o($V91,[2,60]),{41:[1,192],63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL},{2:$V0,4:193,6:21,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o([8,38,41,53,54,63],[2,64],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),{49:194,54:$Vv},o($Va1,[2,69]),{40:$V51,68:195},{42:196,70:$VW,71:$VX,72:$VY,73:$VZ},o($V61,[2,76],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($VU,[2,36],{63:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,87:$VK,88:$VL}),o($Vp,[2,46]),{49:197,54:$Vv},{12:198,40:$VV,44:25,45:41},{12:199,40:$VV,44:25,45:41},{2:$V0,4:200,6:21,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,34:34,35:$V8,37:$V9,40:$Va,44:25,45:41,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo},o($V91,[2,63],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,6:21,44:25,34:34,45:41,9:51,2:$V0,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,35:$V8,37:$V9,40:$Va,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo}),o($Vp,[2,67]),o($V61,[2,71]),o($V61,[2,73]),o($V_,[2,55]),{53:[1,201]},{53:[1,202]},o($V91,[2,62],{10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,6:21,44:25,34:34,45:41,9:51,2:$V0,26:$V1,27:$V2,28:$V3,29:$V4,31:$V5,32:$V6,33:$V7,35:$V8,37:$V9,40:$Va,48:$Vb,52:$Vc,56:$Vd,57:$Ve,58:$Vf,64:$Vg,65:$Vh,74:$Vi,86:$Vj,89:$Vk,90:$Vl,91:$Vm,92:$Vn,93:$Vo}),{49:203,54:$Vv},{49:204,54:$Vv},o($Vp,[2,65]),o($Vp,[2,66])],
defaultActions: {3:[2,2],39:[2,24],50:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //Carpeta AST
    var {AST} = require("./AST/AST");
    var {Error} = require("./AST/Error");
    var {NodoAST} = require("./AST/NodoAST");
    var {Simbolo} = require("./AST/Simbolo");
    var {Tabla} = require("./AST/Tabla");
    var {Tipo,Tipos} = require("./AST/Tipo");
    

    //Carpeta Expresion
    var {Aritmetica} = require("./Expresion/Aritmetica");
    var {Primitivo} = require("./Expresion/Primitivo");
    var {Identificador} = require("./Expresion/Identificador");
    var {Relacional} = require("./Expresion/Relacional");
    var {Logica} = require("./Expresion/Logica");
    var {Continue} = require("./Expresion/Continue");
    var {Break} = require("./Expresion/Break");
    var {Return} = require("./Expresion/Return");
    
    
    //Carpeta Instruccion
    var {ConsoleLog} = require("./Instruccion/ConsoleLog");
    var {Declaracion} = require("./Instruccion/Declaracion");
    var {Asignacion} = require("./Instruccion/Asignacion");
    var {If} = require("./Instruccion/If");
    var {While} = require("./Instruccion/While");
    var {DoWhile} = require("./Instruccion/DoWhile");
    var {For} = require("./Instruccion/For");
    var {Switch} = require("./Instruccion/Switch");
    var {Case} = require("./Instruccion/Case");
    var {Ternario} = require("./Instruccion/Ternario");
    var {Funcion} = require("./Instruccion/Funcion");
    var {UsoFuncion} = require("./Instruccion/UsoFuncion");
    var {graficar_ts} = require("./Instruccion/graficar_ts");


    var errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 27;
break;
case 1:return 28;
break;
case 2:return 70;
break;
case 3:return 72;
break;
case 4:return 71;
break;
case 5:return 73;
break;
case 6:return 'TK_ARRAY';
break;
case 7:return 'TK_ARRAY';
break;
case 8:return 46;
break;
case 9:return 47;
break;
case 10:return 78;
break;
case 11:return 75;
break;
case 12:return 74;
break;
case 13:return 76;
break;
case 14:return 77;
break;
case 15:return 79;
break;
case 16:return 84;
break;
case 17:return 85;
break;
case 18:return 82;
break;
case 19:return 81;
break;
case 20:return 83;
break;
case 21:return 80;
break;
case 22:return 88;
break;
case 23:return 87;
break;
case 24:return 86;
break;
case 25:return 52;
break;
case 26:return 53;
break;
case 27:return 54;
break;
case 28:return 7;
break;
case 29:return 8;
break;
case 30:return 41;
break;
case 31:return 38;
break;
case 32:return 43;
break;
case 33:return '.';
break;
case 34:return 63;
break;
case 35:return 65;
break;
case 36:return 48;
break;
case 37:return 51;
break;
case 38:return 58;
break;
case 39:return 61;
break;
case 40:return 57;
break;
case 41:return 56;
break;
case 42:return 64;
break;
case 43:return 'TK_IN';
break;
case 44:return 'TK_OF';
break;
case 45:return 32;
break;
case 46:return 33;
break;
case 47:return 31;
break;
case 48:return 62;
break;
case 49:return 'TK_PUSH';
break;
case 50:return 'TK_POP';
break;
case 51:return 'TK_LENGTH';
break;
case 52:return 37;
break;
case 53:return 35;
break;
case 54:return 29;
break;
case 55:return 26;
break;
case 56:return 90;
break;
case 57:return 91;
break;
case 58:return 92;
break;
case 59:return 40;
break;
case 60:return 89;
break;
case 61:return 93;
break;
case 62:
break;
case 63:errores.push(new Error("Lexico", yy_.yytext+" No pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\*(\*|\/|[^"*/"])*\*\/)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:Array\b)/,/^(?:type\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:\?)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"((\\")?|[^\"])*")/,/^(?:[A-Za-z"_"][A-Za-z"_"0-9]*)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'((\\')|[^"'"])*')/,/^(?:[ \r\t\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}